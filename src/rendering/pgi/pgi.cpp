#include "pgi.hpp"
#include <iostream>

static const daxa_f32vec3 PROBE_MESH_POSITIONS[] = {
    daxa_f32vec3{ 0.000000, 0.555570, 0.831470 },
    daxa_f32vec3{ 0.000000, 0.831470, 0.555570 },
    daxa_f32vec3{ 0.000000, 0.980785, 0.195090 },
    daxa_f32vec3{ 0.000000, 1.000000, 0.000000 },
    daxa_f32vec3{ 0.000000, 0.980785, -0.195090 },
    daxa_f32vec3{ 0.000000, 0.831470, -0.555570 },
    daxa_f32vec3{ 0.038060, 0.191342, 0.980785 },
    daxa_f32vec3{ 0.074658, 0.375330, 0.923880 },
    daxa_f32vec3{ 0.108386, 0.544895, 0.831470 },
    daxa_f32vec3{ 0.137950, 0.693520, 0.707107 },
    daxa_f32vec3{ 0.162212, 0.815493, 0.555570 },
    daxa_f32vec3{ 0.180240, 0.906127, 0.382683 },
    daxa_f32vec3{ 0.191342, 0.961940, 0.195090 },
    daxa_f32vec3{ 0.195090, 0.980785, 0.000000 },
    daxa_f32vec3{ 0.191342, 0.961940, -0.195090 },
    daxa_f32vec3{ 0.180240, 0.906127, -0.382683 },
    daxa_f32vec3{ 0.162212, 0.815493, -0.555570 },
    daxa_f32vec3{ 0.137950, 0.693520, -0.707107 },
    daxa_f32vec3{ 0.108386, 0.544895, -0.831470 },
    daxa_f32vec3{ 0.074658, 0.375330, -0.923880 },
    daxa_f32vec3{ 0.038060, 0.191342, -0.980785 },
    daxa_f32vec3{ 0.074658, 0.180240, 0.980785 },
    daxa_f32vec3{ 0.146447, 0.353553, 0.923880 },
    daxa_f32vec3{ 0.212608, 0.513280, 0.831470 },
    daxa_f32vec3{ 0.270598, 0.653281, 0.707107 },
    daxa_f32vec3{ 0.318190, 0.768178, 0.555570 },
    daxa_f32vec3{ 0.353553, 0.853553, 0.382683 },
    daxa_f32vec3{ 0.375330, 0.906127, 0.195090 },
    daxa_f32vec3{ 0.382683, 0.923879, 0.000000 },
    daxa_f32vec3{ 0.375330, 0.906127, -0.195090 },
    daxa_f32vec3{ 0.353553, 0.853553, -0.382683 },
    daxa_f32vec3{ 0.318190, 0.768178, -0.555570 },
    daxa_f32vec3{ 0.270598, 0.653281, -0.707107 },
    daxa_f32vec3{ 0.212608, 0.513280, -0.831470 },
    daxa_f32vec3{ 0.146447, 0.353553, -0.923880 },
    daxa_f32vec3{ 0.074658, 0.180240, -0.980785 },
    daxa_f32vec3{ 0.108386, 0.162212, 0.980785 },
    daxa_f32vec3{ 0.212608, 0.318190, 0.923880 },
    daxa_f32vec3{ 0.308658, 0.461940, 0.831470 },
    daxa_f32vec3{ 0.392847, 0.587938, 0.707107 },
    daxa_f32vec3{ 0.461940, 0.691342, 0.555570 },
    daxa_f32vec3{ 0.513280, 0.768178, 0.382683 },
    daxa_f32vec3{ 0.544895, 0.815493, 0.195090 },
    daxa_f32vec3{ 0.555570, 0.831469, 0.000000 },
    daxa_f32vec3{ 0.544895, 0.815493, -0.195090 },
    daxa_f32vec3{ 0.513280, 0.768178, -0.382683 },
    daxa_f32vec3{ 0.461940, 0.691342, -0.555570 },
    daxa_f32vec3{ 0.392847, 0.587938, -0.707107 },
    daxa_f32vec3{ 0.308658, 0.461940, -0.831470 },
    daxa_f32vec3{ 0.212608, 0.318190, -0.923880 },
    daxa_f32vec3{ 0.108386, 0.162212, -0.980785 },
    daxa_f32vec3{ 0.137950, 0.137950, 0.980785 },
    daxa_f32vec3{ 0.270598, 0.270598, 0.923880 },
    daxa_f32vec3{ 0.392847, 0.392847, 0.831470 },
    daxa_f32vec3{ 0.500000, 0.500000, 0.707107 },
    daxa_f32vec3{ 0.587938, 0.587938, 0.555570 },
    daxa_f32vec3{ 0.653281, 0.653281, 0.382683 },
    daxa_f32vec3{ 0.693520, 0.693520, 0.195090 },
    daxa_f32vec3{ 0.707107, 0.707107, 0.000000 },
    daxa_f32vec3{ 0.693520, 0.693520, -0.195090 },
    daxa_f32vec3{ 0.653281, 0.653281, -0.382683 },
    daxa_f32vec3{ 0.587938, 0.587938, -0.555570 },
    daxa_f32vec3{ 0.500000, 0.500000, -0.707107 },
    daxa_f32vec3{ 0.392847, 0.392847, -0.831470 },
    daxa_f32vec3{ 0.270598, 0.270598, -0.923880 },
    daxa_f32vec3{ 0.137950, 0.137950, -0.980785 },
    daxa_f32vec3{ 0.162212, 0.108386, 0.980785 },
    daxa_f32vec3{ 0.318190, 0.212608, 0.923880 },
    daxa_f32vec3{ 0.461940, 0.308658, 0.831470 },
    daxa_f32vec3{ 0.587938, 0.392847, 0.707107 },
    daxa_f32vec3{ 0.691342, 0.461940, 0.555570 },
    daxa_f32vec3{ 0.768178, 0.513280, 0.382683 },
    daxa_f32vec3{ 0.815493, 0.544895, 0.195090 },
    daxa_f32vec3{ 0.831470, 0.555570, 0.000000 },
    daxa_f32vec3{ 0.815493, 0.544895, -0.195090 },
    daxa_f32vec3{ 0.768178, 0.513280, -0.382683 },
    daxa_f32vec3{ 0.691342, 0.461940, -0.555570 },
    daxa_f32vec3{ 0.587938, 0.392847, -0.707107 },
    daxa_f32vec3{ 0.461940, 0.308658, -0.831470 },
    daxa_f32vec3{ 0.318190, 0.212608, -0.923880 },
    daxa_f32vec3{ 0.162212, 0.108386, -0.980785 },
    daxa_f32vec3{ 0.000000, 0.000000, 1.000000 },
    daxa_f32vec3{ 0.180240, 0.074658, 0.980785 },
    daxa_f32vec3{ 0.353553, 0.146447, 0.923880 },
    daxa_f32vec3{ 0.513280, 0.212607, 0.831470 },
    daxa_f32vec3{ 0.653281, 0.270598, 0.707107 },
    daxa_f32vec3{ 0.768178, 0.318190, 0.555570 },
    daxa_f32vec3{ 0.853553, 0.353553, 0.382683 },
    daxa_f32vec3{ 0.906127, 0.375330, 0.195090 },
    daxa_f32vec3{ 0.923879, 0.382683, 0.000000 },
    daxa_f32vec3{ 0.906127, 0.375330, -0.195090 },
    daxa_f32vec3{ 0.853553, 0.353553, -0.382683 },
    daxa_f32vec3{ 0.768178, 0.318190, -0.555570 },
    daxa_f32vec3{ 0.653281, 0.270598, -0.707107 },
    daxa_f32vec3{ 0.513280, 0.212607, -0.831470 },
    daxa_f32vec3{ 0.353553, 0.146447, -0.923880 },
    daxa_f32vec3{ 0.180240, 0.074658, -0.980785 },
    daxa_f32vec3{ 0.191342, 0.038060, 0.980785 },
    daxa_f32vec3{ 0.375330, 0.074658, 0.923880 },
    daxa_f32vec3{ 0.544895, 0.108386, 0.831470 },
    daxa_f32vec3{ 0.693520, 0.137950, 0.707107 },
    daxa_f32vec3{ 0.815493, 0.162212, 0.555570 },
    daxa_f32vec3{ 0.906127, 0.180240, 0.382683 },
    daxa_f32vec3{ 0.961940, 0.191342, 0.195090 },
    daxa_f32vec3{ 0.980785, 0.195090, 0.000000 },
    daxa_f32vec3{ 0.961940, 0.191342, -0.195090 },
    daxa_f32vec3{ 0.906127, 0.180240, -0.382683 },
    daxa_f32vec3{ 0.815493, 0.162212, -0.555570 },
    daxa_f32vec3{ 0.693520, 0.137950, -0.707107 },
    daxa_f32vec3{ 0.544895, 0.108386, -0.831470 },
    daxa_f32vec3{ 0.375330, 0.074658, -0.923880 },
    daxa_f32vec3{ 0.191342, 0.038060, -0.980785 },
    daxa_f32vec3{ 0.195090, -0.000000, 0.980785 },
    daxa_f32vec3{ 0.382683, -0.000000, 0.923880 },
    daxa_f32vec3{ 0.555570, -0.000000, 0.831470 },
    daxa_f32vec3{ 0.707107, 0.000000, 0.707107 },
    daxa_f32vec3{ 0.831469, -0.000000, 0.555570 },
    daxa_f32vec3{ 0.923879, 0.000000, 0.382683 },
    daxa_f32vec3{ 0.980785, -0.000000, 0.195090 },
    daxa_f32vec3{ 1.000000, -0.000000, 0.000000 },
    daxa_f32vec3{ 0.980785, -0.000000, -0.195090 },
    daxa_f32vec3{ 0.923879, 0.000000, -0.382683 },
    daxa_f32vec3{ 0.831469, -0.000000, -0.555570 },
    daxa_f32vec3{ 0.707107, 0.000000, -0.707107 },
    daxa_f32vec3{ 0.555570, -0.000000, -0.831470 },
    daxa_f32vec3{ 0.382683, -0.000000, -0.923880 },
    daxa_f32vec3{ 0.195090, -0.000000, -0.980785 },
    daxa_f32vec3{ 0.191342, -0.038060, 0.980785 },
    daxa_f32vec3{ 0.375330, -0.074658, 0.923880 },
    daxa_f32vec3{ 0.544895, -0.108386, 0.831470 },
    daxa_f32vec3{ 0.693520, -0.137950, 0.707107 },
    daxa_f32vec3{ 0.815493, -0.162212, 0.555570 },
    daxa_f32vec3{ 0.906127, -0.180240, 0.382683 },
    daxa_f32vec3{ 0.961940, -0.191342, 0.195090 },
    daxa_f32vec3{ 0.980785, -0.195090, 0.000000 },
    daxa_f32vec3{ 0.961940, -0.191342, -0.195090 },
    daxa_f32vec3{ 0.906127, -0.180240, -0.382683 },
    daxa_f32vec3{ 0.815493, -0.162212, -0.555570 },
    daxa_f32vec3{ 0.693520, -0.137950, -0.707107 },
    daxa_f32vec3{ 0.544895, -0.108386, -0.831470 },
    daxa_f32vec3{ 0.375330, -0.074658, -0.923880 },
    daxa_f32vec3{ 0.191342, -0.038060, -0.980785 },
    daxa_f32vec3{ 0.180240, -0.074658, 0.980785 },
    daxa_f32vec3{ 0.353553, -0.146447, 0.923880 },
    daxa_f32vec3{ 0.513280, -0.212608, 0.831470 },
    daxa_f32vec3{ 0.653281, -0.270598, 0.707107 },
    daxa_f32vec3{ 0.768178, -0.318190, 0.555570 },
    daxa_f32vec3{ 0.853553, -0.353553, 0.382683 },
    daxa_f32vec3{ 0.906127, -0.375330, 0.195090 },
    daxa_f32vec3{ 0.923879, -0.382683, 0.000000 },
    daxa_f32vec3{ 0.906127, -0.375330, -0.195090 },
    daxa_f32vec3{ 0.853553, -0.353553, -0.382683 },
    daxa_f32vec3{ 0.768178, -0.318190, -0.555570 },
    daxa_f32vec3{ 0.653281, -0.270598, -0.707107 },
    daxa_f32vec3{ 0.513280, -0.212608, -0.831470 },
    daxa_f32vec3{ 0.353553, -0.146447, -0.923880 },
    daxa_f32vec3{ 0.180240, -0.074658, -0.980785 },
    daxa_f32vec3{ 0.162212, -0.108386, 0.980785 },
    daxa_f32vec3{ 0.318190, -0.212608, 0.923880 },
    daxa_f32vec3{ 0.461940, -0.308658, 0.831470 },
    daxa_f32vec3{ 0.587938, -0.392847, 0.707107 },
    daxa_f32vec3{ 0.691341, -0.461940, 0.555570 },
    daxa_f32vec3{ 0.768178, -0.513280, 0.382683 },
    daxa_f32vec3{ 0.815493, -0.544895, 0.195090 },
    daxa_f32vec3{ 0.831469, -0.555570, 0.000000 },
    daxa_f32vec3{ 0.815493, -0.544895, -0.195090 },
    daxa_f32vec3{ 0.768178, -0.513280, -0.382683 },
    daxa_f32vec3{ 0.691341, -0.461940, -0.555570 },
    daxa_f32vec3{ 0.587938, -0.392847, -0.707107 },
    daxa_f32vec3{ 0.461940, -0.308658, -0.831470 },
    daxa_f32vec3{ 0.318190, -0.212608, -0.923880 },
    daxa_f32vec3{ 0.162212, -0.108386, -0.980785 },
    daxa_f32vec3{ 0.137950, -0.137950, 0.980785 },
    daxa_f32vec3{ 0.270598, -0.270598, 0.923880 },
    daxa_f32vec3{ 0.392847, -0.392847, 0.831470 },
    daxa_f32vec3{ 0.500000, -0.500000, 0.707107 },
    daxa_f32vec3{ 0.587938, -0.587938, 0.555570 },
    daxa_f32vec3{ 0.653281, -0.653281, 0.382683 },
    daxa_f32vec3{ 0.693520, -0.693520, 0.195090 },
    daxa_f32vec3{ 0.707106, -0.707107, 0.000000 },
    daxa_f32vec3{ 0.693520, -0.693520, -0.195090 },
    daxa_f32vec3{ 0.653281, -0.653281, -0.382683 },
    daxa_f32vec3{ 0.587938, -0.587938, -0.555570 },
    daxa_f32vec3{ 0.500000, -0.500000, -0.707107 },
    daxa_f32vec3{ 0.392847, -0.392847, -0.831470 },
    daxa_f32vec3{ 0.270598, -0.270598, -0.923880 },
    daxa_f32vec3{ 0.137950, -0.137950, -0.980785 },
    daxa_f32vec3{ 0.108386, -0.162212, 0.980785 },
    daxa_f32vec3{ 0.212607, -0.318190, 0.923880 },
    daxa_f32vec3{ 0.308658, -0.461940, 0.831470 },
    daxa_f32vec3{ 0.392847, -0.587938, 0.707107 },
    daxa_f32vec3{ 0.461940, -0.691342, 0.555570 },
    daxa_f32vec3{ 0.513280, -0.768178, 0.382683 },
    daxa_f32vec3{ 0.544895, -0.815493, 0.195090 },
    daxa_f32vec3{ 0.555570, -0.831469, 0.000000 },
    daxa_f32vec3{ 0.544895, -0.815493, -0.195090 },
    daxa_f32vec3{ 0.513280, -0.768178, -0.382683 },
    daxa_f32vec3{ 0.461940, -0.691342, -0.555570 },
    daxa_f32vec3{ 0.392847, -0.587938, -0.707107 },
    daxa_f32vec3{ 0.308658, -0.461940, -0.831470 },
    daxa_f32vec3{ 0.212607, -0.318190, -0.923880 },
    daxa_f32vec3{ 0.108386, -0.162212, -0.980785 },
    daxa_f32vec3{ 0.074658, -0.180240, 0.980785 },
    daxa_f32vec3{ 0.146447, -0.353553, 0.923880 },
    daxa_f32vec3{ 0.212607, -0.513280, 0.831470 },
    daxa_f32vec3{ 0.270598, -0.653281, 0.707107 },
    daxa_f32vec3{ 0.318189, -0.768178, 0.555570 },
    daxa_f32vec3{ 0.353553, -0.853553, 0.382683 },
    daxa_f32vec3{ 0.375330, -0.906127, 0.195090 },
    daxa_f32vec3{ 0.382683, -0.923879, 0.000000 },
    daxa_f32vec3{ 0.375330, -0.906127, -0.195090 },
    daxa_f32vec3{ 0.353553, -0.853553, -0.382683 },
    daxa_f32vec3{ 0.318189, -0.768178, -0.555570 },
    daxa_f32vec3{ 0.270598, -0.653281, -0.707107 },
    daxa_f32vec3{ 0.212607, -0.513280, -0.831470 },
    daxa_f32vec3{ 0.146447, -0.353553, -0.923880 },
    daxa_f32vec3{ 0.074658, -0.180240, -0.980785 },
    daxa_f32vec3{ 0.038060, -0.191342, 0.980785 },
    daxa_f32vec3{ 0.074658, -0.375330, 0.923880 },
    daxa_f32vec3{ 0.108386, -0.544895, 0.831470 },
    daxa_f32vec3{ 0.137950, -0.693520, 0.707107 },
    daxa_f32vec3{ 0.162212, -0.815493, 0.555570 },
    daxa_f32vec3{ 0.180240, -0.906127, 0.382683 },
    daxa_f32vec3{ 0.191342, -0.961939, 0.195090 },
    daxa_f32vec3{ 0.195090, -0.980785, 0.000000 },
    daxa_f32vec3{ 0.191342, -0.961939, -0.195090 },
    daxa_f32vec3{ 0.180240, -0.906127, -0.382683 },
    daxa_f32vec3{ 0.162212, -0.815493, -0.555570 },
    daxa_f32vec3{ 0.137950, -0.693520, -0.707107 },
    daxa_f32vec3{ 0.108386, -0.544895, -0.831470 },
    daxa_f32vec3{ 0.074658, -0.375330, -0.923880 },
    daxa_f32vec3{ 0.038060, -0.191342, -0.980785 },
    daxa_f32vec3{ -0.000000, -0.195090, 0.980785 },
    daxa_f32vec3{ -0.000000, -0.382683, 0.923880 },
    daxa_f32vec3{ -0.000000, -0.555570, 0.831470 },
    daxa_f32vec3{ -0.000000, -0.707107, 0.707107 },
    daxa_f32vec3{ -0.000000, -0.831469, 0.555570 },
    daxa_f32vec3{ 0.000000, -0.923879, 0.382683 },
    daxa_f32vec3{ -0.000000, -0.980785, 0.195090 },
    daxa_f32vec3{ -0.000000, -0.999999, 0.000000 },
    daxa_f32vec3{ -0.000000, -0.980785, -0.195090 },
    daxa_f32vec3{ 0.000000, -0.923879, -0.382683 },
    daxa_f32vec3{ -0.000000, -0.831469, -0.555570 },
    daxa_f32vec3{ -0.000000, -0.707107, -0.707107 },
    daxa_f32vec3{ -0.000000, -0.555570, -0.831470 },
    daxa_f32vec3{ -0.000000, -0.382683, -0.923880 },
    daxa_f32vec3{ -0.000000, -0.195090, -0.980785 },
    daxa_f32vec3{ -0.038060, -0.191342, 0.980785 },
    daxa_f32vec3{ -0.074658, -0.375330, 0.923880 },
    daxa_f32vec3{ -0.108386, -0.544895, 0.831470 },
    daxa_f32vec3{ -0.137950, -0.693520, 0.707107 },
    daxa_f32vec3{ -0.162212, -0.815493, 0.555570 },
    daxa_f32vec3{ -0.180240, -0.906127, 0.382683 },
    daxa_f32vec3{ -0.191342, -0.961939, 0.195090 },
    daxa_f32vec3{ -0.195091, -0.980785, 0.000000 },
    daxa_f32vec3{ -0.191342, -0.961939, -0.195090 },
    daxa_f32vec3{ -0.180240, -0.906127, -0.382683 },
    daxa_f32vec3{ -0.162212, -0.815493, -0.555570 },
    daxa_f32vec3{ -0.137950, -0.693520, -0.707107 },
    daxa_f32vec3{ -0.108386, -0.544895, -0.831470 },
    daxa_f32vec3{ -0.074658, -0.375330, -0.923880 },
    daxa_f32vec3{ -0.038060, -0.191342, -0.980785 },
    daxa_f32vec3{ -0.074658, -0.180240, 0.980785 },
    daxa_f32vec3{ -0.146447, -0.353553, 0.923880 },
    daxa_f32vec3{ -0.212608, -0.513280, 0.831470 },
    daxa_f32vec3{ -0.270598, -0.653281, 0.707107 },
    daxa_f32vec3{ -0.318190, -0.768177, 0.555570 },
    daxa_f32vec3{ -0.353553, -0.853553, 0.382683 },
    daxa_f32vec3{ -0.375330, -0.906127, 0.195090 },
    daxa_f32vec3{ -0.382683, -0.923879, 0.000000 },
    daxa_f32vec3{ -0.375330, -0.906127, -0.195090 },
    daxa_f32vec3{ -0.353553, -0.853553, -0.382683 },
    daxa_f32vec3{ -0.318190, -0.768177, -0.555570 },
    daxa_f32vec3{ -0.270598, -0.653281, -0.707107 },
    daxa_f32vec3{ -0.212608, -0.513280, -0.831470 },
    daxa_f32vec3{ -0.146447, -0.353553, -0.923880 },
    daxa_f32vec3{ -0.074658, -0.180240, -0.980785 },
    daxa_f32vec3{ -0.108386, -0.162212, 0.980785 },
    daxa_f32vec3{ -0.212608, -0.318190, 0.923880 },
    daxa_f32vec3{ -0.308658, -0.461939, 0.831470 },
    daxa_f32vec3{ -0.392847, -0.587938, 0.707107 },
    daxa_f32vec3{ -0.461940, -0.691341, 0.555570 },
    daxa_f32vec3{ -0.513280, -0.768178, 0.382683 },
    daxa_f32vec3{ -0.544895, -0.815493, 0.195090 },
    daxa_f32vec3{ -0.555570, -0.831469, 0.000000 },
    daxa_f32vec3{ -0.544895, -0.815493, -0.195090 },
    daxa_f32vec3{ -0.513280, -0.768178, -0.382683 },
    daxa_f32vec3{ -0.461940, -0.691341, -0.555570 },
    daxa_f32vec3{ -0.392847, -0.587938, -0.707107 },
    daxa_f32vec3{ -0.308658, -0.461939, -0.831470 },
    daxa_f32vec3{ -0.212608, -0.318190, -0.923880 },
    daxa_f32vec3{ -0.108386, -0.162212, -0.980785 },
    daxa_f32vec3{ -0.137950, -0.137950, 0.980785 },
    daxa_f32vec3{ -0.270598, -0.270598, 0.923880 },
    daxa_f32vec3{ -0.392847, -0.392847, 0.831470 },
    daxa_f32vec3{ -0.500000, -0.500000, 0.707107 },
    daxa_f32vec3{ -0.587938, -0.587937, 0.555570 },
    daxa_f32vec3{ -0.653281, -0.653281, 0.382683 },
    daxa_f32vec3{ -0.693520, -0.693520, 0.195090 },
    daxa_f32vec3{ -0.707106, -0.707106, 0.000000 },
    daxa_f32vec3{ -0.693520, -0.693520, -0.195090 },
    daxa_f32vec3{ -0.653281, -0.653281, -0.382683 },
    daxa_f32vec3{ -0.587938, -0.587937, -0.555570 },
    daxa_f32vec3{ -0.500000, -0.500000, -0.707107 },
    daxa_f32vec3{ -0.392847, -0.392847, -0.831470 },
    daxa_f32vec3{ -0.270598, -0.270598, -0.923880 },
    daxa_f32vec3{ -0.137950, -0.137950, -0.980785 },
    daxa_f32vec3{ 0.000000, 0.000000, -1.000000 },
    daxa_f32vec3{ -0.162212, -0.108386, 0.980785 },
    daxa_f32vec3{ -0.318190, -0.212607, 0.923880 },
    daxa_f32vec3{ -0.461940, -0.308658, 0.831470 },
    daxa_f32vec3{ -0.587938, -0.392847, 0.707107 },
    daxa_f32vec3{ -0.691341, -0.461939, 0.555570 },
    daxa_f32vec3{ -0.768177, -0.513280, 0.382683 },
    daxa_f32vec3{ -0.815493, -0.544895, 0.195090 },
    daxa_f32vec3{ -0.831469, -0.555569, 0.000000 },
    daxa_f32vec3{ -0.815493, -0.544895, -0.195090 },
    daxa_f32vec3{ -0.768177, -0.513280, -0.382683 },
    daxa_f32vec3{ -0.691341, -0.461939, -0.555570 },
    daxa_f32vec3{ -0.587938, -0.392847, -0.707107 },
    daxa_f32vec3{ -0.461940, -0.308658, -0.831470 },
    daxa_f32vec3{ -0.318190, -0.212607, -0.923880 },
    daxa_f32vec3{ -0.162212, -0.108386, -0.980785 },
    daxa_f32vec3{ -0.180240, -0.074658, 0.980785 },
    daxa_f32vec3{ -0.353553, -0.146447, 0.923880 },
    daxa_f32vec3{ -0.513280, -0.212607, 0.831470 },
    daxa_f32vec3{ -0.653281, -0.270598, 0.707107 },
    daxa_f32vec3{ -0.768177, -0.318189, 0.555570 },
    daxa_f32vec3{ -0.853553, -0.353553, 0.382683 },
    daxa_f32vec3{ -0.906127, -0.375330, 0.195090 },
    daxa_f32vec3{ -0.923879, -0.382683, 0.000000 },
    daxa_f32vec3{ -0.906127, -0.375330, -0.195090 },
    daxa_f32vec3{ -0.853553, -0.353553, -0.382683 },
    daxa_f32vec3{ -0.768177, -0.318189, -0.555570 },
    daxa_f32vec3{ -0.653281, -0.270598, -0.707107 },
    daxa_f32vec3{ -0.513280, -0.212607, -0.831470 },
    daxa_f32vec3{ -0.353553, -0.146447, -0.923880 },
    daxa_f32vec3{ -0.180240, -0.074658, -0.980785 },
    daxa_f32vec3{ -0.191342, -0.038060, 0.980785 },
    daxa_f32vec3{ -0.375330, -0.074658, 0.923880 },
    daxa_f32vec3{ -0.544895, -0.108386, 0.831470 },
    daxa_f32vec3{ -0.693520, -0.137950, 0.707107 },
    daxa_f32vec3{ -0.815493, -0.162211, 0.555570 },
    daxa_f32vec3{ -0.906127, -0.180240, 0.382683 },
    daxa_f32vec3{ -0.961939, -0.191341, 0.195090 },
    daxa_f32vec3{ -0.980784, -0.195090, 0.000000 },
    daxa_f32vec3{ -0.961939, -0.191341, -0.195090 },
    daxa_f32vec3{ -0.906127, -0.180240, -0.382683 },
    daxa_f32vec3{ -0.815493, -0.162211, -0.555570 },
    daxa_f32vec3{ -0.693520, -0.137950, -0.707107 },
    daxa_f32vec3{ -0.544895, -0.108386, -0.831470 },
    daxa_f32vec3{ -0.375330, -0.074658, -0.923880 },
    daxa_f32vec3{ -0.191342, -0.038060, -0.980785 },
    daxa_f32vec3{ -0.195090, 0.000000, 0.980785 },
    daxa_f32vec3{ -0.382683, 0.000000, 0.923880 },
    daxa_f32vec3{ -0.555570, 0.000000, 0.831470 },
    daxa_f32vec3{ -0.707107, 0.000000, 0.707107 },
    daxa_f32vec3{ -0.831469, 0.000000, 0.555570 },
    daxa_f32vec3{ -0.923879, 0.000000, 0.382683 },
    daxa_f32vec3{ -0.980785, 0.000000, 0.195090 },
    daxa_f32vec3{ -0.999999, 0.000000, 0.000000 },
    daxa_f32vec3{ -0.980785, 0.000000, -0.195090 },
    daxa_f32vec3{ -0.923879, 0.000000, -0.382683 },
    daxa_f32vec3{ -0.831469, 0.000000, -0.555570 },
    daxa_f32vec3{ -0.707107, 0.000000, -0.707107 },
    daxa_f32vec3{ -0.555570, 0.000000, -0.831470 },
    daxa_f32vec3{ -0.382683, 0.000000, -0.923880 },
    daxa_f32vec3{ -0.195090, 0.000000, -0.980785 },
    daxa_f32vec3{ -0.191342, 0.038060, 0.980785 },
    daxa_f32vec3{ -0.375330, 0.074658, 0.923880 },
    daxa_f32vec3{ -0.544895, 0.108386, 0.831470 },
    daxa_f32vec3{ -0.693520, 0.137950, 0.707107 },
    daxa_f32vec3{ -0.815493, 0.162212, 0.555570 },
    daxa_f32vec3{ -0.906127, 0.180240, 0.382683 },
    daxa_f32vec3{ -0.961939, 0.191342, 0.195090 },
    daxa_f32vec3{ -0.980784, 0.195091, 0.000000 },
    daxa_f32vec3{ -0.961939, 0.191342, -0.195090 },
    daxa_f32vec3{ -0.906127, 0.180240, -0.382683 },
    daxa_f32vec3{ -0.815493, 0.162212, -0.555570 },
    daxa_f32vec3{ -0.693520, 0.137950, -0.707107 },
    daxa_f32vec3{ -0.544895, 0.108386, -0.831470 },
    daxa_f32vec3{ -0.375330, 0.074658, -0.923880 },
    daxa_f32vec3{ -0.191342, 0.038060, -0.980785 },
    daxa_f32vec3{ -0.180240, 0.074658, 0.980785 },
    daxa_f32vec3{ -0.353553, 0.146447, 0.923880 },
    daxa_f32vec3{ -0.513279, 0.212607, 0.831470 },
    daxa_f32vec3{ -0.653281, 0.270598, 0.707107 },
    daxa_f32vec3{ -0.768177, 0.318190, 0.555570 },
    daxa_f32vec3{ -0.853553, 0.353553, 0.382683 },
    daxa_f32vec3{ -0.906127, 0.375330, 0.195090 },
    daxa_f32vec3{ -0.923878, 0.382683, 0.000000 },
    daxa_f32vec3{ -0.906127, 0.375330, -0.195090 },
    daxa_f32vec3{ -0.853553, 0.353553, -0.382683 },
    daxa_f32vec3{ -0.768177, 0.318190, -0.555570 },
    daxa_f32vec3{ -0.653281, 0.270598, -0.707107 },
    daxa_f32vec3{ -0.513279, 0.212607, -0.831470 },
    daxa_f32vec3{ -0.353553, 0.146447, -0.923880 },
    daxa_f32vec3{ -0.180240, 0.074658, -0.980785 },
    daxa_f32vec3{ -0.162212, 0.108386, 0.980785 },
    daxa_f32vec3{ -0.318189, 0.212607, 0.923880 },
    daxa_f32vec3{ -0.461939, 0.308658, 0.831470 },
    daxa_f32vec3{ -0.587938, 0.392847, 0.707107 },
    daxa_f32vec3{ -0.691341, 0.461940, 0.555570 },
    daxa_f32vec3{ -0.768177, 0.513280, 0.382683 },
    daxa_f32vec3{ -0.815493, 0.544895, 0.195090 },
    daxa_f32vec3{ -0.831468, 0.555570, 0.000000 },
    daxa_f32vec3{ -0.815493, 0.544895, -0.195090 },
    daxa_f32vec3{ -0.768177, 0.513280, -0.382683 },
    daxa_f32vec3{ -0.691341, 0.461940, -0.555570 },
    daxa_f32vec3{ -0.587938, 0.392847, -0.707107 },
    daxa_f32vec3{ -0.461939, 0.308658, -0.831470 },
    daxa_f32vec3{ -0.318189, 0.212607, -0.923880 },
    daxa_f32vec3{ -0.162212, 0.108386, -0.980785 },
    daxa_f32vec3{ -0.137950, 0.137950, 0.980785 },
    daxa_f32vec3{ -0.270598, 0.270598, 0.923880 },
    daxa_f32vec3{ -0.392847, 0.392847, 0.831470 },
    daxa_f32vec3{ -0.500000, 0.500000, 0.707107 },
    daxa_f32vec3{ -0.587937, 0.587938, 0.555570 },
    daxa_f32vec3{ -0.653281, 0.653281, 0.382683 },
    daxa_f32vec3{ -0.693519, 0.693520, 0.195090 },
    daxa_f32vec3{ -0.707106, 0.707106, 0.000000 },
    daxa_f32vec3{ -0.693519, 0.693520, -0.195090 },
    daxa_f32vec3{ -0.653281, 0.653281, -0.382683 },
    daxa_f32vec3{ -0.587937, 0.587938, -0.555570 },
    daxa_f32vec3{ -0.500000, 0.500000, -0.707107 },
    daxa_f32vec3{ -0.392847, 0.392847, -0.831470 },
    daxa_f32vec3{ -0.270598, 0.270598, -0.923880 },
    daxa_f32vec3{ -0.137950, 0.137950, -0.980785 },
    daxa_f32vec3{ -0.108386, 0.162212, 0.980785 },
    daxa_f32vec3{ -0.212607, 0.318190, 0.923880 },
    daxa_f32vec3{ -0.308658, 0.461939, 0.831470 },
    daxa_f32vec3{ -0.392847, 0.587938, 0.707107 },
    daxa_f32vec3{ -0.461939, 0.691341, 0.555570 },
    daxa_f32vec3{ -0.513280, 0.768177, 0.382683 },
    daxa_f32vec3{ -0.544895, 0.815493, 0.195090 },
    daxa_f32vec3{ -0.555569, 0.831469, 0.000000 },
    daxa_f32vec3{ -0.544895, 0.815493, -0.195090 },
    daxa_f32vec3{ -0.513280, 0.768177, -0.382683 },
    daxa_f32vec3{ -0.461939, 0.691341, -0.555570 },
    daxa_f32vec3{ -0.392847, 0.587938, -0.707107 },
    daxa_f32vec3{ -0.308658, 0.461939, -0.831470 },
    daxa_f32vec3{ -0.212607, 0.318190, -0.923880 },
    daxa_f32vec3{ -0.108386, 0.162212, -0.980785 },
    daxa_f32vec3{ -0.074658, 0.180240, 0.980785 },
    daxa_f32vec3{ -0.146446, 0.353553, 0.923880 },
    daxa_f32vec3{ -0.212607, 0.513279, 0.831470 },
    daxa_f32vec3{ -0.270598, 0.653281, 0.707107 },
    daxa_f32vec3{ -0.318189, 0.768177, 0.555570 },
    daxa_f32vec3{ -0.353553, 0.853553, 0.382683 },
    daxa_f32vec3{ -0.375330, 0.906127, 0.195090 },
    daxa_f32vec3{ -0.382683, 0.923879, 0.000000 },
    daxa_f32vec3{ -0.375330, 0.906127, -0.195090 },
    daxa_f32vec3{ -0.353553, 0.853553, -0.382683 },
    daxa_f32vec3{ -0.318189, 0.768177, -0.555570 },
    daxa_f32vec3{ -0.270598, 0.653281, -0.707107 },
    daxa_f32vec3{ -0.212607, 0.513279, -0.831470 },
    daxa_f32vec3{ -0.146446, 0.353553, -0.923880 },
    daxa_f32vec3{ -0.074658, 0.180240, -0.980785 },
    daxa_f32vec3{ -0.038060, 0.191342, 0.980785 },
    daxa_f32vec3{ -0.074658, 0.375330, 0.923880 },
    daxa_f32vec3{ -0.108386, 0.544895, 0.831470 },
    daxa_f32vec3{ -0.137950, 0.693520, 0.707107 },
    daxa_f32vec3{ -0.162211, 0.815493, 0.555570 },
    daxa_f32vec3{ -0.180240, 0.906127, 0.382683 },
    daxa_f32vec3{ -0.191341, 0.961939, 0.195090 },
    daxa_f32vec3{ -0.195090, 0.980784, 0.000000 },
    daxa_f32vec3{ -0.191341, 0.961939, -0.195090 },
    daxa_f32vec3{ -0.180240, 0.906127, -0.382683 },
    daxa_f32vec3{ -0.162211, 0.815493, -0.555570 },
    daxa_f32vec3{ -0.137950, 0.693520, -0.707107 },
    daxa_f32vec3{ -0.108386, 0.544895, -0.831470 },
    daxa_f32vec3{ -0.074658, 0.375330, -0.923880 },
    daxa_f32vec3{ -0.038060, 0.191342, -0.980785 },
    daxa_f32vec3{ 0.000000, 0.195090, 0.980785 },
    daxa_f32vec3{ 0.000000, 0.382683, 0.923880 },
    daxa_f32vec3{ 0.000000, 0.707107, 0.707107 },
    daxa_f32vec3{ 0.000000, 0.923879, 0.382683 },
    daxa_f32vec3{ 0.000000, 0.923879, -0.382683 },
    daxa_f32vec3{ 0.000000, 0.707107, -0.707107 },
    daxa_f32vec3{ 0.000000, 0.555570, -0.831470 },
    daxa_f32vec3{ 0.000000, 0.382683, -0.923880 },
    daxa_f32vec3{ 0.000000, 0.195090, -0.980785 },
};

static const daxa_i32 PROBE_MESH_INDICES[] = {
    3-1, 14-1, 4-1,
    474-1, 82-1, 7-1,
    308-1, 482-1, 21-1,
    4-1, 15-1, 5-1,
    475-1, 7-1, 8-1,
    5-1, 16-1, 478-1,
    1-1, 8-1, 9-1,
    478-1, 17-1, 6-1,
    476-1, 9-1, 10-1,
    6-1, 18-1, 479-1,
    2-1, 10-1, 11-1,
    479-1, 19-1, 480-1,
    477-1, 11-1, 12-1,
    480-1, 20-1, 481-1,
    3-1, 12-1, 13-1,
    481-1, 21-1, 482-1,
    20-1, 34-1, 35-1,
    13-1, 27-1, 28-1,
    20-1, 36-1, 21-1,
    13-1, 29-1, 14-1,
    7-1, 82-1, 22-1,
    308-1, 21-1, 36-1,
    14-1, 30-1, 15-1,
    7-1, 23-1, 8-1,
    15-1, 31-1, 16-1,
    8-1, 24-1, 9-1,
    16-1, 32-1, 17-1,
    9-1, 25-1, 10-1,
    17-1, 33-1, 18-1,
    10-1, 26-1, 11-1,
    19-1, 33-1, 34-1,
    11-1, 27-1, 12-1,
    32-1, 46-1, 47-1,
    24-1, 40-1, 25-1,
    33-1, 47-1, 48-1,
    25-1, 41-1, 26-1,
    34-1, 48-1, 49-1,
    26-1, 42-1, 27-1,
    34-1, 50-1, 35-1,
    27-1, 43-1, 28-1,
    35-1, 51-1, 36-1,
    28-1, 44-1, 29-1,
    22-1, 82-1, 37-1,
    308-1, 36-1, 51-1,
    30-1, 44-1, 45-1,
    22-1, 38-1, 23-1,
    30-1, 46-1, 31-1,
    23-1, 39-1, 24-1,
    50-1, 66-1, 51-1,
    44-1, 58-1, 59-1,
    37-1, 82-1, 52-1,
    308-1, 51-1, 66-1,
    44-1, 60-1, 45-1,
    37-1, 53-1, 38-1,
    45-1, 61-1, 46-1,
    38-1, 54-1, 39-1,
    47-1, 61-1, 62-1,
    39-1, 55-1, 40-1,
    47-1, 63-1, 48-1,
    40-1, 56-1, 41-1,
    48-1, 64-1, 49-1,
    41-1, 57-1, 42-1,
    49-1, 65-1, 50-1,
    43-1, 57-1, 58-1,
    54-1, 70-1, 55-1,
    62-1, 78-1, 63-1,
    56-1, 70-1, 71-1,
    63-1, 79-1, 64-1,
    56-1, 72-1, 57-1,
    65-1, 79-1, 80-1,
    58-1, 72-1, 73-1,
    65-1, 81-1, 66-1,
    59-1, 73-1, 74-1,
    52-1, 82-1, 67-1,
    308-1, 66-1, 81-1,
    59-1, 75-1, 60-1,
    52-1, 68-1, 53-1,
    60-1, 76-1, 61-1,
    53-1, 69-1, 54-1,
    62-1, 76-1, 77-1,
    74-1, 89-1, 90-1,
    67-1, 82-1, 83-1,
    308-1, 81-1, 97-1,
    74-1, 91-1, 75-1,
    67-1, 84-1, 68-1,
    75-1, 92-1, 76-1,
    68-1, 85-1, 69-1,
    77-1, 92-1, 93-1,
    69-1, 86-1, 70-1,
    77-1, 94-1, 78-1,
    71-1, 86-1, 87-1,
    78-1, 95-1, 79-1,
    71-1, 88-1, 72-1,
    79-1, 96-1, 80-1,
    73-1, 88-1, 89-1,
    81-1, 96-1, 97-1,
    93-1, 109-1, 94-1,
    87-1, 101-1, 102-1,
    95-1, 109-1, 110-1,
    87-1, 103-1, 88-1,
    96-1, 110-1, 111-1,
    89-1, 103-1, 104-1,
    96-1, 112-1, 97-1,
    90-1, 104-1, 105-1,
    83-1, 82-1, 98-1,
    308-1, 97-1, 112-1,
    90-1, 106-1, 91-1,
    84-1, 98-1, 99-1,
    91-1, 107-1, 92-1,
    84-1, 100-1, 85-1,
    93-1, 107-1, 108-1,
    85-1, 101-1, 86-1,
    98-1, 82-1, 113-1,
    308-1, 112-1, 127-1,
    105-1, 121-1, 106-1,
    99-1, 113-1, 114-1,
    106-1, 122-1, 107-1,
    99-1, 115-1, 100-1,
    108-1, 122-1, 123-1,
    100-1, 116-1, 101-1,
    108-1, 124-1, 109-1,
    102-1, 116-1, 117-1,
    110-1, 124-1, 125-1,
    102-1, 118-1, 103-1,
    110-1, 126-1, 111-1,
    104-1, 118-1, 119-1,
    111-1, 127-1, 112-1,
    105-1, 119-1, 120-1,
    117-1, 131-1, 132-1,
    125-1, 139-1, 140-1,
    117-1, 133-1, 118-1,
    125-1, 141-1, 126-1,
    119-1, 133-1, 134-1,
    126-1, 142-1, 127-1,
    120-1, 134-1, 135-1,
    113-1, 82-1, 128-1,
    308-1, 127-1, 142-1,
    120-1, 136-1, 121-1,
    113-1, 129-1, 114-1,
    121-1, 137-1, 122-1,
    114-1, 130-1, 115-1,
    123-1, 137-1, 138-1,
    115-1, 131-1, 116-1,
    123-1, 139-1, 124-1,
    135-1, 151-1, 136-1,
    128-1, 144-1, 129-1,
    136-1, 152-1, 137-1,
    130-1, 144-1, 145-1,
    138-1, 152-1, 153-1,
    130-1, 146-1, 131-1,
    138-1, 154-1, 139-1,
    132-1, 146-1, 147-1,
    140-1, 154-1, 155-1,
    132-1, 148-1, 133-1,
    140-1, 156-1, 141-1,
    134-1, 148-1, 149-1,
    142-1, 156-1, 157-1,
    135-1, 149-1, 150-1,
    128-1, 82-1, 143-1,
    308-1, 142-1, 157-1,
    155-1, 169-1, 170-1,
    147-1, 163-1, 148-1,
    155-1, 171-1, 156-1,
    149-1, 163-1, 164-1,
    156-1, 172-1, 157-1,
    150-1, 164-1, 165-1,
    143-1, 82-1, 158-1,
    308-1, 157-1, 172-1,
    150-1, 166-1, 151-1,
    143-1, 159-1, 144-1,
    151-1, 167-1, 152-1,
    145-1, 159-1, 160-1,
    153-1, 167-1, 168-1,
    145-1, 161-1, 146-1,
    153-1, 169-1, 154-1,
    147-1, 161-1, 162-1,
    166-1, 182-1, 167-1,
    159-1, 175-1, 160-1,
    168-1, 182-1, 183-1,
    160-1, 176-1, 161-1,
    168-1, 184-1, 169-1,
    162-1, 176-1, 177-1,
    169-1, 185-1, 170-1,
    162-1, 178-1, 163-1,
    171-1, 185-1, 186-1,
    164-1, 178-1, 179-1,
    172-1, 186-1, 187-1,
    165-1, 179-1, 180-1,
    158-1, 82-1, 173-1,
    308-1, 172-1, 187-1,
    165-1, 181-1, 166-1,
    158-1, 174-1, 159-1,
    185-1, 201-1, 186-1,
    179-1, 193-1, 194-1,
    186-1, 202-1, 187-1,
    180-1, 194-1, 195-1,
    173-1, 82-1, 188-1,
    308-1, 187-1, 202-1,
    180-1, 196-1, 181-1,
    174-1, 188-1, 189-1,
    181-1, 197-1, 182-1,
    175-1, 189-1, 190-1,
    183-1, 197-1, 198-1,
    175-1, 191-1, 176-1,
    183-1, 199-1, 184-1,
    177-1, 191-1, 192-1,
    185-1, 199-1, 200-1,
    177-1, 193-1, 178-1,
    189-1, 205-1, 190-1,
    198-1, 212-1, 213-1,
    190-1, 206-1, 191-1,
    198-1, 214-1, 199-1,
    192-1, 206-1, 207-1,
    200-1, 214-1, 215-1,
    192-1, 208-1, 193-1,
    200-1, 216-1, 201-1,
    194-1, 208-1, 209-1,
    201-1, 217-1, 202-1,
    195-1, 209-1, 210-1,
    188-1, 82-1, 203-1,
    308-1, 202-1, 217-1,
    195-1, 211-1, 196-1,
    188-1, 204-1, 189-1,
    196-1, 212-1, 197-1,
    209-1, 223-1, 224-1,
    216-1, 232-1, 217-1,
    210-1, 224-1, 225-1,
    203-1, 82-1, 218-1,
    308-1, 217-1, 232-1,
    210-1, 226-1, 211-1,
    203-1, 219-1, 204-1,
    211-1, 227-1, 212-1,
    204-1, 220-1, 205-1,
    213-1, 227-1, 228-1,
    205-1, 221-1, 206-1,
    213-1, 229-1, 214-1,
    207-1, 221-1, 222-1,
    215-1, 229-1, 230-1,
    207-1, 223-1, 208-1,
    215-1, 231-1, 216-1,
    228-1, 242-1, 243-1,
    220-1, 236-1, 221-1,
    228-1, 244-1, 229-1,
    222-1, 236-1, 237-1,
    230-1, 244-1, 245-1,
    222-1, 238-1, 223-1,
    230-1, 246-1, 231-1,
    224-1, 238-1, 239-1,
    232-1, 246-1, 247-1,
    225-1, 239-1, 240-1,
    218-1, 82-1, 233-1,
    308-1, 232-1, 247-1,
    225-1, 241-1, 226-1,
    218-1, 234-1, 219-1,
    226-1, 242-1, 227-1,
    220-1, 234-1, 235-1,
    246-1, 262-1, 247-1,
    240-1, 254-1, 255-1,
    233-1, 82-1, 248-1,
    308-1, 247-1, 262-1,
    240-1, 256-1, 241-1,
    233-1, 249-1, 234-1,
    241-1, 257-1, 242-1,
    234-1, 250-1, 235-1,
    243-1, 257-1, 258-1,
    235-1, 251-1, 236-1,
    243-1, 259-1, 244-1,
    237-1, 251-1, 252-1,
    245-1, 259-1, 260-1,
    237-1, 253-1, 238-1,
    245-1, 261-1, 246-1,
    239-1, 253-1, 254-1,
    250-1, 266-1, 251-1,
    258-1, 274-1, 259-1,
    252-1, 266-1, 267-1,
    260-1, 274-1, 275-1,
    252-1, 268-1, 253-1,
    260-1, 276-1, 261-1,
    254-1, 268-1, 269-1,
    261-1, 277-1, 262-1,
    255-1, 269-1, 270-1,
    248-1, 82-1, 263-1,
    308-1, 262-1, 277-1,
    255-1, 271-1, 256-1,
    249-1, 263-1, 264-1,
    256-1, 272-1, 257-1,
    249-1, 265-1, 250-1,
    258-1, 272-1, 273-1,
    270-1, 284-1, 285-1,
    263-1, 82-1, 278-1,
    308-1, 277-1, 292-1,
    270-1, 286-1, 271-1,
    264-1, 278-1, 279-1,
    271-1, 287-1, 272-1,
    264-1, 280-1, 265-1,
    273-1, 287-1, 288-1,
    265-1, 281-1, 266-1,
    273-1, 289-1, 274-1,
    267-1, 281-1, 282-1,
    275-1, 289-1, 290-1,
    267-1, 283-1, 268-1,
    275-1, 291-1, 276-1,
    269-1, 283-1, 284-1,
    277-1, 291-1, 292-1,
    288-1, 304-1, 289-1,
    282-1, 296-1, 297-1,
    290-1, 304-1, 305-1,
    282-1, 298-1, 283-1,
    290-1, 306-1, 291-1,
    284-1, 298-1, 299-1,
    292-1, 306-1, 307-1,
    285-1, 299-1, 300-1,
    278-1, 82-1, 293-1,
    308-1, 292-1, 307-1,
    285-1, 301-1, 286-1,
    278-1, 294-1, 279-1,
    286-1, 302-1, 287-1,
    279-1, 295-1, 280-1,
    288-1, 302-1, 303-1,
    280-1, 296-1, 281-1,
    308-1, 307-1, 323-1,
    300-1, 317-1, 301-1,
    293-1, 310-1, 294-1,
    301-1, 318-1, 302-1,
    294-1, 311-1, 295-1,
    303-1, 318-1, 319-1,
    295-1, 312-1, 296-1,
    303-1, 320-1, 304-1,
    297-1, 312-1, 313-1,
    305-1, 320-1, 321-1,
    297-1, 314-1, 298-1,
    305-1, 322-1, 306-1,
    299-1, 314-1, 315-1,
    306-1, 323-1, 307-1,
    300-1, 315-1, 316-1,
    293-1, 82-1, 309-1,
    321-1, 335-1, 336-1,
    313-1, 329-1, 314-1,
    321-1, 337-1, 322-1,
    315-1, 329-1, 330-1,
    322-1, 338-1, 323-1,
    316-1, 330-1, 331-1,
    309-1, 82-1, 324-1,
    308-1, 323-1, 338-1,
    316-1, 332-1, 317-1,
    309-1, 325-1, 310-1,
    317-1, 333-1, 318-1,
    310-1, 326-1, 311-1,
    319-1, 333-1, 334-1,
    311-1, 327-1, 312-1,
    319-1, 335-1, 320-1,
    312-1, 328-1, 313-1,
    324-1, 340-1, 325-1,
    332-1, 348-1, 333-1,
    325-1, 341-1, 326-1,
    334-1, 348-1, 349-1,
    326-1, 342-1, 327-1,
    334-1, 350-1, 335-1,
    328-1, 342-1, 343-1,
    336-1, 350-1, 351-1,
    328-1, 344-1, 329-1,
    336-1, 352-1, 337-1,
    330-1, 344-1, 345-1,
    337-1, 353-1, 338-1,
    331-1, 345-1, 346-1,
    324-1, 82-1, 339-1,
    308-1, 338-1, 353-1,
    331-1, 347-1, 332-1,
    343-1, 359-1, 344-1,
    351-1, 367-1, 352-1,
    345-1, 359-1, 360-1,
    352-1, 368-1, 353-1,
    346-1, 360-1, 361-1,
    339-1, 82-1, 354-1,
    308-1, 353-1, 368-1,
    346-1, 362-1, 347-1,
    339-1, 355-1, 340-1,
    347-1, 363-1, 348-1,
    341-1, 355-1, 356-1,
    349-1, 363-1, 364-1,
    341-1, 357-1, 342-1,
    349-1, 365-1, 350-1,
    343-1, 357-1, 358-1,
    351-1, 365-1, 366-1,
    362-1, 378-1, 363-1,
    356-1, 370-1, 371-1,
    364-1, 378-1, 379-1,
    356-1, 372-1, 357-1,
    364-1, 380-1, 365-1,
    358-1, 372-1, 373-1,
    366-1, 380-1, 381-1,
    358-1, 374-1, 359-1,
    366-1, 382-1, 367-1,
    360-1, 374-1, 375-1,
    367-1, 383-1, 368-1,
    361-1, 375-1, 376-1,
    354-1, 82-1, 369-1,
    308-1, 368-1, 383-1,
    361-1, 377-1, 362-1,
    354-1, 370-1, 355-1,
    381-1, 397-1, 382-1,
    375-1, 389-1, 390-1,
    382-1, 398-1, 383-1,
    376-1, 390-1, 391-1,
    369-1, 82-1, 384-1,
    308-1, 383-1, 398-1,
    376-1, 392-1, 377-1,
    369-1, 385-1, 370-1,
    377-1, 393-1, 378-1,
    371-1, 385-1, 386-1,
    379-1, 393-1, 394-1,
    371-1, 387-1, 372-1,
    379-1, 395-1, 380-1,
    373-1, 387-1, 388-1,
    381-1, 395-1, 396-1,
    373-1, 389-1, 374-1,
    385-1, 401-1, 386-1,
    394-1, 408-1, 409-1,
    386-1, 402-1, 387-1,
    394-1, 410-1, 395-1,
    388-1, 402-1, 403-1,
    396-1, 410-1, 411-1,
    388-1, 404-1, 389-1,
    397-1, 411-1, 412-1,
    390-1, 404-1, 405-1,
    397-1, 413-1, 398-1,
    391-1, 405-1, 406-1,
    384-1, 82-1, 399-1,
    308-1, 398-1, 413-1,
    391-1, 407-1, 392-1,
    385-1, 399-1, 400-1,
    392-1, 408-1, 393-1,
    405-1, 419-1, 420-1,
    412-1, 428-1, 413-1,
    406-1, 420-1, 421-1,
    399-1, 82-1, 414-1,
    308-1, 413-1, 428-1,
    406-1, 422-1, 407-1,
    399-1, 415-1, 400-1,
    407-1, 423-1, 408-1,
    401-1, 415-1, 416-1,
    409-1, 423-1, 424-1,
    401-1, 417-1, 402-1,
    409-1, 425-1, 410-1,
    403-1, 417-1, 418-1,
    411-1, 425-1, 426-1,
    403-1, 419-1, 404-1,
    411-1, 427-1, 412-1,
    424-1, 438-1, 439-1,
    416-1, 432-1, 417-1,
    424-1, 440-1, 425-1,
    418-1, 432-1, 433-1,
    426-1, 440-1, 441-1,
    418-1, 434-1, 419-1,
    426-1, 442-1, 427-1,
    420-1, 434-1, 435-1,
    427-1, 443-1, 428-1,
    421-1, 435-1, 436-1,
    414-1, 82-1, 429-1,
    308-1, 428-1, 443-1,
    421-1, 437-1, 422-1,
    414-1, 430-1, 415-1,
    422-1, 438-1, 423-1,
    416-1, 430-1, 431-1,
    442-1, 458-1, 443-1,
    436-1, 450-1, 451-1,
    429-1, 82-1, 444-1,
    308-1, 443-1, 458-1,
    436-1, 452-1, 437-1,
    430-1, 444-1, 445-1,
    437-1, 453-1, 438-1,
    430-1, 446-1, 431-1,
    439-1, 453-1, 454-1,
    431-1, 447-1, 432-1,
    439-1, 455-1, 440-1,
    433-1, 447-1, 448-1,
    441-1, 455-1, 456-1,
    433-1, 449-1, 434-1,
    441-1, 457-1, 442-1,
    435-1, 449-1, 450-1,
    454-1, 470-1, 455-1,
    448-1, 462-1, 463-1,
    456-1, 470-1, 471-1,
    448-1, 464-1, 449-1,
    456-1, 472-1, 457-1,
    450-1, 464-1, 465-1,
    458-1, 472-1, 473-1,
    451-1, 465-1, 466-1,
    444-1, 82-1, 459-1,
    308-1, 458-1, 473-1,
    451-1, 467-1, 452-1,
    444-1, 460-1, 445-1,
    452-1, 468-1, 453-1,
    446-1, 460-1, 461-1,
    454-1, 468-1, 469-1,
    446-1, 462-1, 447-1,
    459-1, 82-1, 474-1,
    308-1, 473-1, 482-1,
    466-1, 5-1, 467-1,
    460-1, 474-1, 475-1,
    467-1, 478-1, 468-1,
    461-1, 475-1, 1-1,
    468-1, 6-1, 469-1,
    462-1, 1-1, 476-1,
    469-1, 479-1, 470-1,
    463-1, 476-1, 2-1,
    471-1, 479-1, 480-1,
    464-1, 2-1, 477-1,
    471-1, 481-1, 472-1,
    465-1, 477-1, 3-1,
    472-1, 482-1, 473-1,
    466-1, 3-1, 4-1,
    3-1, 13-1, 14-1,
    4-1, 14-1, 15-1,
    475-1, 474-1, 7-1,
    5-1, 15-1, 16-1,
    1-1, 475-1, 8-1,
    478-1, 16-1, 17-1,
    476-1, 1-1, 9-1,
    6-1, 17-1, 18-1,
    2-1, 476-1, 10-1,
    479-1, 18-1, 19-1,
    477-1, 2-1, 11-1,
    480-1, 19-1, 20-1,
    3-1, 477-1, 12-1,
    481-1, 20-1, 21-1,
    20-1, 19-1, 34-1,
    13-1, 12-1, 27-1,
    20-1, 35-1, 36-1,
    13-1, 28-1, 29-1,
    14-1, 29-1, 30-1,
    7-1, 22-1, 23-1,
    15-1, 30-1, 31-1,
    8-1, 23-1, 24-1,
    16-1, 31-1, 32-1,
    9-1, 24-1, 25-1,
    17-1, 32-1, 33-1,
    10-1, 25-1, 26-1,
    19-1, 18-1, 33-1,
    11-1, 26-1, 27-1,
    32-1, 31-1, 46-1,
    24-1, 39-1, 40-1,
    33-1, 32-1, 47-1,
    25-1, 40-1, 41-1,
    34-1, 33-1, 48-1,
    26-1, 41-1, 42-1,
    34-1, 49-1, 50-1,
    27-1, 42-1, 43-1,
    35-1, 50-1, 51-1,
    28-1, 43-1, 44-1,
    30-1, 29-1, 44-1,
    22-1, 37-1, 38-1,
    30-1, 45-1, 46-1,
    23-1, 38-1, 39-1,
    50-1, 65-1, 66-1,
    44-1, 43-1, 58-1,
    44-1, 59-1, 60-1,
    37-1, 52-1, 53-1,
    45-1, 60-1, 61-1,
    38-1, 53-1, 54-1,
    47-1, 46-1, 61-1,
    39-1, 54-1, 55-1,
    47-1, 62-1, 63-1,
    40-1, 55-1, 56-1,
    48-1, 63-1, 64-1,
    41-1, 56-1, 57-1,
    49-1, 64-1, 65-1,
    43-1, 42-1, 57-1,
    54-1, 69-1, 70-1,
    62-1, 77-1, 78-1,
    56-1, 55-1, 70-1,
    63-1, 78-1, 79-1,
    56-1, 71-1, 72-1,
    65-1, 64-1, 79-1,
    58-1, 57-1, 72-1,
    65-1, 80-1, 81-1,
    59-1, 58-1, 73-1,
    59-1, 74-1, 75-1,
    52-1, 67-1, 68-1,
    60-1, 75-1, 76-1,
    53-1, 68-1, 69-1,
    62-1, 61-1, 76-1,
    74-1, 73-1, 89-1,
    74-1, 90-1, 91-1,
    67-1, 83-1, 84-1,
    75-1, 91-1, 92-1,
    68-1, 84-1, 85-1,
    77-1, 76-1, 92-1,
    69-1, 85-1, 86-1,
    77-1, 93-1, 94-1,
    71-1, 70-1, 86-1,
    78-1, 94-1, 95-1,
    71-1, 87-1, 88-1,
    79-1, 95-1, 96-1,
    73-1, 72-1, 88-1,
    81-1, 80-1, 96-1,
    93-1, 108-1, 109-1,
    87-1, 86-1, 101-1,
    95-1, 94-1, 109-1,
    87-1, 102-1, 103-1,
    96-1, 95-1, 110-1,
    89-1, 88-1, 103-1,
    96-1, 111-1, 112-1,
    90-1, 89-1, 104-1,
    90-1, 105-1, 106-1,
    84-1, 83-1, 98-1,
    91-1, 106-1, 107-1,
    84-1, 99-1, 100-1,
    93-1, 92-1, 107-1,
    85-1, 100-1, 101-1,
    105-1, 120-1, 121-1,
    99-1, 98-1, 113-1,
    106-1, 121-1, 122-1,
    99-1, 114-1, 115-1,
    108-1, 107-1, 122-1,
    100-1, 115-1, 116-1,
    108-1, 123-1, 124-1,
    102-1, 101-1, 116-1,
    110-1, 109-1, 124-1,
    102-1, 117-1, 118-1,
    110-1, 125-1, 126-1,
    104-1, 103-1, 118-1,
    111-1, 126-1, 127-1,
    105-1, 104-1, 119-1,
    117-1, 116-1, 131-1,
    125-1, 124-1, 139-1,
    117-1, 132-1, 133-1,
    125-1, 140-1, 141-1,
    119-1, 118-1, 133-1,
    126-1, 141-1, 142-1,
    120-1, 119-1, 134-1,
    120-1, 135-1, 136-1,
    113-1, 128-1, 129-1,
    121-1, 136-1, 137-1,
    114-1, 129-1, 130-1,
    123-1, 122-1, 137-1,
    115-1, 130-1, 131-1,
    123-1, 138-1, 139-1,
    135-1, 150-1, 151-1,
    128-1, 143-1, 144-1,
    136-1, 151-1, 152-1,
    130-1, 129-1, 144-1,
    138-1, 137-1, 152-1,
    130-1, 145-1, 146-1,
    138-1, 153-1, 154-1,
    132-1, 131-1, 146-1,
    140-1, 139-1, 154-1,
    132-1, 147-1, 148-1,
    140-1, 155-1, 156-1,
    134-1, 133-1, 148-1,
    142-1, 141-1, 156-1,
    135-1, 134-1, 149-1,
    155-1, 154-1, 169-1,
    147-1, 162-1, 163-1,
    155-1, 170-1, 171-1,
    149-1, 148-1, 163-1,
    156-1, 171-1, 172-1,
    150-1, 149-1, 164-1,
    150-1, 165-1, 166-1,
    143-1, 158-1, 159-1,
    151-1, 166-1, 167-1,
    145-1, 144-1, 159-1,
    153-1, 152-1, 167-1,
    145-1, 160-1, 161-1,
    153-1, 168-1, 169-1,
    147-1, 146-1, 161-1,
    166-1, 181-1, 182-1,
    159-1, 174-1, 175-1,
    168-1, 167-1, 182-1,
    160-1, 175-1, 176-1,
    168-1, 183-1, 184-1,
    162-1, 161-1, 176-1,
    169-1, 184-1, 185-1,
    162-1, 177-1, 178-1,
    171-1, 170-1, 185-1,
    164-1, 163-1, 178-1,
    172-1, 171-1, 186-1,
    165-1, 164-1, 179-1,
    165-1, 180-1, 181-1,
    158-1, 173-1, 174-1,
    185-1, 200-1, 201-1,
    179-1, 178-1, 193-1,
    186-1, 201-1, 202-1,
    180-1, 179-1, 194-1,
    180-1, 195-1, 196-1,
    174-1, 173-1, 188-1,
    181-1, 196-1, 197-1,
    175-1, 174-1, 189-1,
    183-1, 182-1, 197-1,
    175-1, 190-1, 191-1,
    183-1, 198-1, 199-1,
    177-1, 176-1, 191-1,
    185-1, 184-1, 199-1,
    177-1, 192-1, 193-1,
    189-1, 204-1, 205-1,
    198-1, 197-1, 212-1,
    190-1, 205-1, 206-1,
    198-1, 213-1, 214-1,
    192-1, 191-1, 206-1,
    200-1, 199-1, 214-1,
    192-1, 207-1, 208-1,
    200-1, 215-1, 216-1,
    194-1, 193-1, 208-1,
    201-1, 216-1, 217-1,
    195-1, 194-1, 209-1,
    195-1, 210-1, 211-1,
    188-1, 203-1, 204-1,
    196-1, 211-1, 212-1,
    209-1, 208-1, 223-1,
    216-1, 231-1, 232-1,
    210-1, 209-1, 224-1,
    210-1, 225-1, 226-1,
    203-1, 218-1, 219-1,
    211-1, 226-1, 227-1,
    204-1, 219-1, 220-1,
    213-1, 212-1, 227-1,
    205-1, 220-1, 221-1,
    213-1, 228-1, 229-1,
    207-1, 206-1, 221-1,
    215-1, 214-1, 229-1,
    207-1, 222-1, 223-1,
    215-1, 230-1, 231-1,
    228-1, 227-1, 242-1,
    220-1, 235-1, 236-1,
    228-1, 243-1, 244-1,
    222-1, 221-1, 236-1,
    230-1, 229-1, 244-1,
    222-1, 237-1, 238-1,
    230-1, 245-1, 246-1,
    224-1, 223-1, 238-1,
    232-1, 231-1, 246-1,
    225-1, 224-1, 239-1,
    225-1, 240-1, 241-1,
    218-1, 233-1, 234-1,
    226-1, 241-1, 242-1,
    220-1, 219-1, 234-1,
    246-1, 261-1, 262-1,
    240-1, 239-1, 254-1,
    240-1, 255-1, 256-1,
    233-1, 248-1, 249-1,
    241-1, 256-1, 257-1,
    234-1, 249-1, 250-1,
    243-1, 242-1, 257-1,
    235-1, 250-1, 251-1,
    243-1, 258-1, 259-1,
    237-1, 236-1, 251-1,
    245-1, 244-1, 259-1,
    237-1, 252-1, 253-1,
    245-1, 260-1, 261-1,
    239-1, 238-1, 253-1,
    250-1, 265-1, 266-1,
    258-1, 273-1, 274-1,
    252-1, 251-1, 266-1,
    260-1, 259-1, 274-1,
    252-1, 267-1, 268-1,
    260-1, 275-1, 276-1,
    254-1, 253-1, 268-1,
    261-1, 276-1, 277-1,
    255-1, 254-1, 269-1,
    255-1, 270-1, 271-1,
    249-1, 248-1, 263-1,
    256-1, 271-1, 272-1,
    249-1, 264-1, 265-1,
    258-1, 257-1, 272-1,
    270-1, 269-1, 284-1,
    270-1, 285-1, 286-1,
    264-1, 263-1, 278-1,
    271-1, 286-1, 287-1,
    264-1, 279-1, 280-1,
    273-1, 272-1, 287-1,
    265-1, 280-1, 281-1,
    273-1, 288-1, 289-1,
    267-1, 266-1, 281-1,
    275-1, 274-1, 289-1,
    267-1, 282-1, 283-1,
    275-1, 290-1, 291-1,
    269-1, 268-1, 283-1,
    277-1, 276-1, 291-1,
    288-1, 303-1, 304-1,
    282-1, 281-1, 296-1,
    290-1, 289-1, 304-1,
    282-1, 297-1, 298-1,
    290-1, 305-1, 306-1,
    284-1, 283-1, 298-1,
    292-1, 291-1, 306-1,
    285-1, 284-1, 299-1,
    285-1, 300-1, 301-1,
    278-1, 293-1, 294-1,
    286-1, 301-1, 302-1,
    279-1, 294-1, 295-1,
    288-1, 287-1, 302-1,
    280-1, 295-1, 296-1,
    300-1, 316-1, 317-1,
    293-1, 309-1, 310-1,
    301-1, 317-1, 318-1,
    294-1, 310-1, 311-1,
    303-1, 302-1, 318-1,
    295-1, 311-1, 312-1,
    303-1, 319-1, 320-1,
    297-1, 296-1, 312-1,
    305-1, 304-1, 320-1,
    297-1, 313-1, 314-1,
    305-1, 321-1, 322-1,
    299-1, 298-1, 314-1,
    306-1, 322-1, 323-1,
    300-1, 299-1, 315-1,
    321-1, 320-1, 335-1,
    313-1, 328-1, 329-1,
    321-1, 336-1, 337-1,
    315-1, 314-1, 329-1,
    322-1, 337-1, 338-1,
    316-1, 315-1, 330-1,
    316-1, 331-1, 332-1,
    309-1, 324-1, 325-1,
    317-1, 332-1, 333-1,
    310-1, 325-1, 326-1,
    319-1, 318-1, 333-1,
    311-1, 326-1, 327-1,
    319-1, 334-1, 335-1,
    312-1, 327-1, 328-1,
    324-1, 339-1, 340-1,
    332-1, 347-1, 348-1,
    325-1, 340-1, 341-1,
    334-1, 333-1, 348-1,
    326-1, 341-1, 342-1,
    334-1, 349-1, 350-1,
    328-1, 327-1, 342-1,
    336-1, 335-1, 350-1,
    328-1, 343-1, 344-1,
    336-1, 351-1, 352-1,
    330-1, 329-1, 344-1,
    337-1, 352-1, 353-1,
    331-1, 330-1, 345-1,
    331-1, 346-1, 347-1,
    343-1, 358-1, 359-1,
    351-1, 366-1, 367-1,
    345-1, 344-1, 359-1,
    352-1, 367-1, 368-1,
    346-1, 345-1, 360-1,
    346-1, 361-1, 362-1,
    339-1, 354-1, 355-1,
    347-1, 362-1, 363-1,
    341-1, 340-1, 355-1,
    349-1, 348-1, 363-1,
    341-1, 356-1, 357-1,
    349-1, 364-1, 365-1,
    343-1, 342-1, 357-1,
    351-1, 350-1, 365-1,
    362-1, 377-1, 378-1,
    356-1, 355-1, 370-1,
    364-1, 363-1, 378-1,
    356-1, 371-1, 372-1,
    364-1, 379-1, 380-1,
    358-1, 357-1, 372-1,
    366-1, 365-1, 380-1,
    358-1, 373-1, 374-1,
    366-1, 381-1, 382-1,
    360-1, 359-1, 374-1,
    367-1, 382-1, 383-1,
    361-1, 360-1, 375-1,
    361-1, 376-1, 377-1,
    354-1, 369-1, 370-1,
    381-1, 396-1, 397-1,
    375-1, 374-1, 389-1,
    382-1, 397-1, 398-1,
    376-1, 375-1, 390-1,
    376-1, 391-1, 392-1,
    369-1, 384-1, 385-1,
    377-1, 392-1, 393-1,
    371-1, 370-1, 385-1,
    379-1, 378-1, 393-1,
    371-1, 386-1, 387-1,
    379-1, 394-1, 395-1,
    373-1, 372-1, 387-1,
    381-1, 380-1, 395-1,
    373-1, 388-1, 389-1,
    385-1, 400-1, 401-1,
    394-1, 393-1, 408-1,
    386-1, 401-1, 402-1,
    394-1, 409-1, 410-1,
    388-1, 387-1, 402-1,
    396-1, 395-1, 410-1,
    388-1, 403-1, 404-1,
    397-1, 396-1, 411-1,
    390-1, 389-1, 404-1,
    397-1, 412-1, 413-1,
    391-1, 390-1, 405-1,
    391-1, 406-1, 407-1,
    385-1, 384-1, 399-1,
    392-1, 407-1, 408-1,
    405-1, 404-1, 419-1,
    412-1, 427-1, 428-1,
    406-1, 405-1, 420-1,
    406-1, 421-1, 422-1,
    399-1, 414-1, 415-1,
    407-1, 422-1, 423-1,
    401-1, 400-1, 415-1,
    409-1, 408-1, 423-1,
    401-1, 416-1, 417-1,
    409-1, 424-1, 425-1,
    403-1, 402-1, 417-1,
    411-1, 410-1, 425-1,
    403-1, 418-1, 419-1,
    411-1, 426-1, 427-1,
    424-1, 423-1, 438-1,
    416-1, 431-1, 432-1,
    424-1, 439-1, 440-1,
    418-1, 417-1, 432-1,
    426-1, 425-1, 440-1,
    418-1, 433-1, 434-1,
    426-1, 441-1, 442-1,
    420-1, 419-1, 434-1,
    427-1, 442-1, 443-1,
    421-1, 420-1, 435-1,
    421-1, 436-1, 437-1,
    414-1, 429-1, 430-1,
    422-1, 437-1, 438-1,
    416-1, 415-1, 430-1,
    442-1, 457-1, 458-1,
    436-1, 435-1, 450-1,
    436-1, 451-1, 452-1,
    430-1, 429-1, 444-1,
    437-1, 452-1, 453-1,
    430-1, 445-1, 446-1,
    439-1, 438-1, 453-1,
    431-1, 446-1, 447-1,
    439-1, 454-1, 455-1,
    433-1, 432-1, 447-1,
    441-1, 440-1, 455-1,
    433-1, 448-1, 449-1,
    441-1, 456-1, 457-1,
    435-1, 434-1, 449-1,
    454-1, 469-1, 470-1,
    448-1, 447-1, 462-1,
    456-1, 455-1, 470-1,
    448-1, 463-1, 464-1,
    456-1, 471-1, 472-1,
    450-1, 449-1, 464-1,
    458-1, 457-1, 472-1,
    451-1, 450-1, 465-1,
    451-1, 466-1, 467-1,
    444-1, 459-1, 460-1,
    452-1, 467-1, 468-1,
    446-1, 445-1, 460-1,
    454-1, 453-1, 468-1,
    446-1, 461-1, 462-1,
    466-1, 4-1, 5-1,
    460-1, 459-1, 474-1,
    467-1, 5-1, 478-1,
    461-1, 460-1, 475-1,
    468-1, 478-1, 6-1,
    462-1, 461-1, 1-1,
    469-1, 6-1, 479-1,
    463-1, 462-1, 476-1,
    471-1, 470-1, 479-1,
    464-1, 463-1, 2-1,
    471-1, 480-1, 481-1,
    465-1, 464-1, 477-1,
    472-1, 481-1, 482-1,
    466-1, 465-1, 3-1,
};

static constexpr inline char const PGI_SHADER_PATH[] = "./src/rendering/pgi/pgi_debug_draw_probes.hlsl";

MAKE_COMPUTE_COMPILE_INFO(pgi_update_probe_texels_pipeline_compile_info, "./src/rendering/pgi/pgi_update.hlsl", "entry_update_probe_texels")
MAKE_COMPUTE_COMPILE_INFO(pgi_update_probes_compile_info, "./src/rendering/pgi/pgi_update.hlsl", "entry_update_probe")
MAKE_COMPUTE_COMPILE_INFO(pgi_pre_update_probes_compute_compile_info, "./src/rendering/pgi/pgi_update.hlsl", "entry_pre_update_probes")

MAKE_COMPUTE_COMPILE_INFO(pgi_eval_screen_irradiance_compute_compile_info, "./src/rendering/pgi/pgi_eval_screen_irradiance.hlsl", "enty_eval_screen_irradiance")
MAKE_COMPUTE_COMPILE_INFO(pgi_upscale_screen_irradiance_compute_compile_info, "./src/rendering/pgi/pgi_eval_screen_irradiance.hlsl", "entry_upscale_screen_irradiance")

auto pgi_trace_probe_lighting_pipeline_compile_info() -> daxa::RayTracingPipelineCompileInfo2
{
    return {
        .ray_gen_infos = {{.source = daxa::ShaderFile{"./src/rendering/pgi/pgi_trace_probe_lighting.hlsl"}, .entry_point = "entry_ray_gen", .language = daxa::ShaderLanguage::SLANG}},
        .any_hit_infos = {{.source = daxa::ShaderFile{"./src/rendering/pgi/pgi_trace_probe_lighting.hlsl"}, .entry_point = "entry_any_hit", .language = daxa::ShaderLanguage::SLANG}},
        .closest_hit_infos = {{.source = daxa::ShaderFile{"./src/rendering/pgi/pgi_trace_probe_lighting.hlsl"}, .entry_point = "entry_closest_hit", .language = daxa::ShaderLanguage::SLANG}},
        .miss_hit_infos = {{.source = daxa::ShaderFile{"./src/rendering/pgi/pgi_trace_probe_lighting.hlsl"},  .entry_point = "entry_miss", .language = daxa::ShaderLanguage::SLANG}},
        .shader_groups_infos = {
            // Gen Group
            daxa::RayTracingShaderGroupInfo{.type = daxa::ShaderGroup::GENERAL,.general_shader_index = 0},
            // Miss group
            daxa::RayTracingShaderGroupInfo{.type = daxa::ShaderGroup::GENERAL,.general_shader_index = 3},
            // Hit group
            daxa::RayTracingShaderGroupInfo{.type = daxa::ShaderGroup::TRIANGLES_HIT_GROUP,.closest_hit_shader_index = 2},
            daxa::RayTracingShaderGroupInfo{.type = daxa::ShaderGroup::TRIANGLES_HIT_GROUP,.closest_hit_shader_index = 2,.any_hit_shader_index = 1},
        },
        .max_ray_recursion_depth = 1,
        .push_constant_size = sizeof(PGITraceProbeLightingPush),
        .name = std::string{PGITraceProbeLightingH::NAME},
    };
}

auto pgi_draw_debug_probes_compile_info() -> daxa::RasterPipelineCompileInfo
{
    auto ret = daxa::RasterPipelineCompileInfo{};
    ret.color_attachments = std::vector{
        daxa::RenderAttachment{
            .format = daxa::Format::B10G11R11_UFLOAT_PACK32,
        },
    };
    ret.depth_test = {
        .depth_attachment_format = daxa::Format::D32_SFLOAT,
        .enable_depth_write = true,
        .depth_test_compare_op = daxa::CompareOp::GREATER,
        .min_depth_bounds = 0.0f,
        .max_depth_bounds = 1.0f,
    };
    ret.raster = {
        .primitive_topology = daxa::PrimitiveTopology::TRIANGLE_LIST,
        .primitive_restart_enable = {},
        .polygon_mode = daxa::PolygonMode::FILL,
        .face_culling = daxa::FaceCullFlagBits::BACK_BIT,
        .front_face_winding = daxa::FrontFaceWinding::COUNTER_CLOCKWISE,
        .depth_clamp_enable = {},
        .rasterizer_discard_enable = {},
        .depth_bias_enable = {},
        .depth_bias_constant_factor = 0.0f,
        .depth_bias_clamp = 0.0f,
        .depth_bias_slope_factor = 0.0f,
        .line_width = 1.0f,
    };
    ret.fragment_shader_info = daxa::ShaderCompileInfo{
        .source = daxa::ShaderFile{PGI_SHADER_PATH},
        .compile_options = {
            .entry_point = "entry_fragment_draw_debug_probes",
            .language = daxa::ShaderLanguage::SLANG,
        },
    };
    ret.vertex_shader_info = daxa::ShaderCompileInfo{
        .source = daxa::ShaderFile{PGI_SHADER_PATH},
        .compile_options = {
            .entry_point = "entry_vertex_draw_debug_probes",
            .language = daxa::ShaderLanguage::SLANG,
        },
    };
    ret.push_constant_size = sizeof(PGIDrawDebugProbesPush);
    ret.name = "PGIDrawDebugProbes";
    return ret;
}

void PGIDrawDebugProbesTask::callback(daxa::TaskInterface ti)
{
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    auto const colorImageSize = ti.info(AT.color_image).value().size;
    daxa::RenderPassBeginInfo render_pass_begin_info{
        .depth_attachment =
            daxa::RenderAttachmentInfo{
                .image_view = ti.view(AT.depth_image),
                .layout = daxa::ImageLayout::ATTACHMENT_OPTIMAL,
                .load_op = daxa::AttachmentLoadOp::LOAD,
                .store_op = daxa::AttachmentStoreOp::STORE,
                .clear_value = daxa::DepthValue{0.0f, 0},
            },
        .render_area = daxa::Rect2D{.width = colorImageSize.x, .height = colorImageSize.y},
    };
    render_pass_begin_info.color_attachments = {
        daxa::RenderAttachmentInfo{
            .image_view = ti.view(AT.color_image),
            .layout = daxa::ImageLayout::ATTACHMENT_OPTIMAL,
            .load_op = daxa::AttachmentLoadOp::LOAD,
            .store_op = daxa::AttachmentStoreOp::STORE,
            .clear_value = daxa::ClearValue{std::array<u32, 4>{0, 0, 0, 0}},
        },
    };
    auto render_cmd = std::move(ti.recorder).begin_renderpass(render_pass_begin_info);

    render_cmd.set_pipeline(*gpu_context->raster_pipelines.at(pgi_draw_debug_probes_compile_info().name));

    PGIDrawDebugProbesPush push{
        .attach = ti.attachment_shader_blob,
        .probe_mesh_positions = pgi_state->debug_probe_mesh_vertex_positions_addr,
    };
    render_cmd.push_constant(push);

    render_cmd.set_index_buffer({
        .id = pgi_state->debug_probe_mesh_buffer,
    }); 

    {
        render_cmd.draw_indirect({
            .draw_command_buffer = ti.id(AT.probe_indirections),
            .indirect_buffer_offset = offsetof(PGIIndirections, probe_debug_draw_dispatch),
            .draw_count = 1,
            .is_indexed = true,
        });
    }

    ti.recorder = std::move(render_cmd).end_renderpass();
}

void PGIUpdateProbeTexelsTask::callback(daxa::TaskInterface ti)
{
    render_context->render_times.start_gpu_timer(ti.recorder, RenderTimes::index<"PGI","UPDATE_PROBE_TEXELS">());
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    ti.recorder.set_pipeline(*gpu_context->compute_pipelines.at(pgi_update_probe_texels_pipeline_compile_info().name));
    PGIUpdateProbeTexelsPush push = {};
    push.attach = ti.attachment_shader_blob;


    push.update_radiance = true;
    ti.recorder.push_constant(push);
    ti.recorder.dispatch_indirect({
        .indirect_buffer = ti.id(AT.probe_indirections),
        .offset = offsetof(PGIIndirections, probe_radiance_update_dispatch),
    });  

    push.update_radiance = false;
    ti.recorder.push_constant(push);
    ti.recorder.dispatch_indirect({
        .indirect_buffer = ti.id(AT.probe_indirections),
        .offset = offsetof(PGIIndirections, probe_visibility_update_dispatch),
    });

    render_context->render_times.end_gpu_timer(ti.recorder, RenderTimes::index<"PGI","UPDATE_PROBE_TEXELS">());
}

void PGIUpdateProbesTask::callback(daxa::TaskInterface ti)
{
    render_context->render_times.start_gpu_timer(ti.recorder, RenderTimes::index<"PGI","UPDATE_PROBES">());
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    {
        PGIUpdateProbesPush push = {};
        push.attach = ti.attachment_shader_blob;
        ti.recorder.set_pipeline(*gpu_context->compute_pipelines.at(pgi_update_probes_compile_info().name));
        ti.recorder.push_constant(push);
        push.attach = ti.attachment_shader_blob;
        ti.recorder.dispatch_indirect({
            .indirect_buffer = ti.id(AT.probe_indirections),
            .offset = offsetof(PGIIndirections, probe_update_dispatch),
        });
    }
    render_context->render_times.end_gpu_timer(ti.recorder, RenderTimes::index<"PGI","UPDATE_PROBES">());
}

void PGIPreUpdateProbesTask::callback(daxa::TaskInterface ti)
{
    render_context->render_times.start_gpu_timer(ti.recorder, RenderTimes::index<"PGI","PRE_UPDATE_PROBES">());
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    ti.recorder.set_pipeline(*gpu_context->compute_pipelines.at(pgi_pre_update_probes_compute_compile_info().name));
    auto const x = render_data.pgi_settings.probe_count.x;
    auto const y = render_data.pgi_settings.probe_count.y;
    auto const z = render_data.pgi_settings.probe_count.z;
    auto const dispatch_x = round_up_div(x, PGI_PRE_UPDATE_XYZ);
    auto const dispatch_y = round_up_div(y, PGI_PRE_UPDATE_XYZ);
    auto const dispatch_z = round_up_div(z * render_data.pgi_settings.cascade_count, PGI_PRE_UPDATE_XYZ);
    PGIPreUpdateProbesPush push = {};
    push.attach = ti.attachment_shader_blob;
    push.workgroups_finished = reinterpret_cast<u32*>(ti.allocator->allocate_fill(0u).value().device_address);
    push.total_workgroups = dispatch_x * dispatch_y * dispatch_z;
    ti.recorder.push_constant(push);
    ti.recorder.dispatch({dispatch_x,dispatch_y,dispatch_z});
    render_context->render_times.end_gpu_timer(ti.recorder, RenderTimes::index<"PGI","PRE_UPDATE_PROBES">());
}

void PGITraceProbeRaysTask::callback(daxa::TaskInterface ti)
{
    render_context->render_times.start_gpu_timer(ti.recorder, RenderTimes::index<"PGI","TRACE_SHADE_RAYS">());
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    auto& pipeline = gpu_context->ray_tracing_pipelines.at(pgi_trace_probe_lighting_pipeline_compile_info().name);
    ti.recorder.set_pipeline(*pipeline.pipeline);

    PGITraceProbeLightingPush push = {};
    push.attach = ti.allocator->allocate_fill(PGITraceProbeLightingH::AttachmentShaderBlob{ti.attachment_shader_blob}).value().device_address;
    // push.scene = render_data.scene;
    ti.recorder.push_constant(push);

    ti.recorder.trace_rays_indirect({
        .indirect_device_address = ti.device_address(AT.probe_indirections).value() + offsetof(PGIIndirections, probe_trace_dispatch),
        .shader_binding_table = pipeline.sbt,
    });
    render_context->render_times.end_gpu_timer(ti.recorder, RenderTimes::index<"PGI","TRACE_SHADE_RAYS">());
}

void PGIEvalScreenIrradianceTask::callback(daxa::TaskInterface ti)
{
    render_context->render_times.start_gpu_timer(ti.recorder, RenderTimes::index<"PGI","EVAL_SCREEN_IRRADIANCE">());
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    ti.recorder.set_pipeline(*gpu_context->compute_pipelines.at(pgi_eval_screen_irradiance_compute_compile_info().name));

    PGIEvalScreenIrradiancePush push = {};
    push.attach = ti.attachment_shader_blob;
    push.render_target_size = render_data.settings.render_target_size;
    push.irradiance_image_size = { 
        render_data.settings.render_target_size.x,
        render_data.settings.render_target_size.y
    };
    ti.recorder.push_constant(push);
    
    auto const dispatch_x = round_up_div(push.irradiance_image_size.x, PGI_EVAL_SCREEN_IRRADIANCE_XY);
    auto const dispatch_y = round_up_div(push.irradiance_image_size.y, PGI_EVAL_SCREEN_IRRADIANCE_XY);
    
    ti.recorder.dispatch({dispatch_x, dispatch_y, 1});
    render_context->render_times.end_gpu_timer(ti.recorder, RenderTimes::index<"PGI","EVAL_SCREEN_IRRADIANCE">());
}

void PGIUpscaleScreenIrradianceTask::callback(daxa::TaskInterface ti)
{
    auto & gpu_context = render_context->gpu_context;
    auto & render_data = render_context->render_data;
    ti.recorder.set_pipeline(*gpu_context->compute_pipelines.at(pgi_upscale_screen_irradiance_compute_compile_info().name));

    PGIUpscaleScreenIrradiancePush push = {};
    push.attach = ti.attachment_shader_blob;
    push.size = render_data.settings.render_target_size;
    ti.recorder.push_constant(push);
    
    auto const dispatch_x = round_up_div(push.size.x, PGI_UPSCALE_SCREEN_IRRADIANCE_XY);
    auto const dispatch_y = round_up_div(push.size.y, PGI_UPSCALE_SCREEN_IRRADIANCE_XY);
    ti.recorder.dispatch({dispatch_x, dispatch_y, 1});
}

auto pgi_significant_settings_change(PGISettings const & prev, PGISettings const & curr) -> bool
{
    bool const significant_settings_changed = 
        prev.probe_count.x != curr.probe_count.x ||
        prev.probe_count.y != curr.probe_count.y ||
        prev.probe_count.z != curr.probe_count.z ||
        prev.cascade_count != curr.cascade_count ||
        prev.probe_irradiance_resolution != curr.probe_irradiance_resolution ||
        prev.probe_trace_resolution != curr.probe_trace_resolution ||
        prev.probe_visibility_resolution != curr.probe_visibility_resolution ||
        prev.enabled != curr.enabled;
    return significant_settings_changed;
}

void pgi_resolve_settings(PGISettings const & prev_settings, RenderGlobalData & render_data)
{
    render_data.pgi_settings.probe_count.x = std::max(1u, round_up_to_po2(render_data.pgi_settings.probe_count.x));
    render_data.pgi_settings.probe_count.y = std::max(1u, round_up_to_po2(render_data.pgi_settings.probe_count.y));
    render_data.pgi_settings.probe_count.z = std::max(1u, round_up_to_po2(render_data.pgi_settings.probe_count.z));
    render_data.pgi_settings.probe_count_log2.x = msb_index(render_data.pgi_settings.probe_count.x); // As the probe count is a po2, msb gives the exact log2.
    render_data.pgi_settings.probe_count_log2.y = msb_index(render_data.pgi_settings.probe_count.y); // As the probe count is a po2, msb gives the exact log2.
    render_data.pgi_settings.probe_count_log2.z = msb_index(render_data.pgi_settings.probe_count.z); // As the probe count is a po2, msb gives the exact log2.
    render_data.pgi_settings.cascade_count = std::clamp(render_data.pgi_settings.cascade_count, 1, PGI_MAX_CASCADES);

    auto constrain_resolution = [&](auto resolution) {
        auto valid_resolutions = std::array{ 48, 24, 16, 12, 8, 6, 4 };

        for (auto valid_resolution : valid_resolutions)
        {
            if (resolution >= valid_resolution)
            {
                return valid_resolution;
            }
        }
        return valid_resolutions.back();
    };

    render_data.pgi_settings.probe_irradiance_resolution = constrain_resolution(render_data.pgi_settings.probe_irradiance_resolution);
    render_data.pgi_settings.probe_visibility_resolution = constrain_resolution(render_data.pgi_settings.probe_visibility_resolution);

    for (u32 c = 0; c < render_data.pgi_settings.cascade_count; ++c)
    {
        PGICascade& cascade = render_data.pgi_settings.cascades[c];
        PGICascade const& prev_cascade = prev_settings.cascades[c];
        cascade.probe_spacing = {
            static_cast<f32>(render_data.pgi_settings.probe_range.x * s_cast<f32>(1u << c)) / static_cast<f32>(render_data.pgi_settings.probe_count.x - 1),
            static_cast<f32>(render_data.pgi_settings.probe_range.y * s_cast<f32>(1u << c)) / static_cast<f32>(render_data.pgi_settings.probe_count.y - 1),
            static_cast<f32>(render_data.pgi_settings.probe_range.z * s_cast<f32>(1u << c)) / static_cast<f32>(render_data.pgi_settings.probe_count.z - 1),
        };    
        cascade.probe_spacing_rcp = {
            1.0f / static_cast<f32>(cascade.probe_spacing.x),
            1.0f / static_cast<f32>(cascade.probe_spacing.y),
            1.0f / static_cast<f32>(cascade.probe_spacing.z),
        };
        cascade.max_visibility_distance = glm::length(glm::vec3{
            cascade.probe_spacing.x,
            cascade.probe_spacing.y,
            cascade.probe_spacing.z,
        }) * 1.01f;
        cascade.window_to_stable_index_offset = {
            static_cast<i32>(std::floor(render_data.main_camera.position.x * cascade.probe_spacing_rcp.x)),
            static_cast<i32>(std::floor(render_data.main_camera.position.y * cascade.probe_spacing_rcp.y)),
            static_cast<i32>(std::floor(render_data.main_camera.position.z * cascade.probe_spacing_rcp.z)),
        };
        cascade.window_base_position = {
            (cascade.window_to_stable_index_offset.x - (render_data.pgi_settings.probe_count.x / 2) + 1) * cascade.probe_spacing.x,
            (cascade.window_to_stable_index_offset.y - (render_data.pgi_settings.probe_count.y / 2) + 1) * cascade.probe_spacing.y,
            (cascade.window_to_stable_index_offset.z - (render_data.pgi_settings.probe_count.z / 2) + 1) * cascade.probe_spacing.z,
        };
        cascade.window_movement_frame_to_frame = {
            cascade.window_to_stable_index_offset.x - prev_cascade.window_to_stable_index_offset.x,
            cascade.window_to_stable_index_offset.y - prev_cascade.window_to_stable_index_offset.y,
            cascade.window_to_stable_index_offset.z - prev_cascade.window_to_stable_index_offset.z,
        };
    }
    //auto const & cas = render_data.pgi_settings.cascades;
    //std::cout << fmt::format("basepositions: c0 ({:10.7},{:10.7},{:10.7}), c1 ({:10.7},{:10.7},{:10.7}), c2 ({:10.7},{:10.7},{:10.7}), c3 ({:10.7},{:10.7},{:10.7})",
    //    cas[0].window_base_position.x, cas[0].window_base_position.y, cas[0].window_base_position.z, 
    //    cas[1].window_base_position.x, cas[1].window_base_position.y, cas[1].window_base_position.z, 
    //    cas[2].window_base_position.x, cas[2].window_base_position.y, cas[2].window_base_position.z, 
    //    cas[3].window_base_position.x, cas[3].window_base_position.y, cas[3].window_base_position.z
    //) << std::endl;
    
    render_data.pgi_settings.probe_count_rcp = {
        1.0f / static_cast<float>(render_data.pgi_settings.probe_count.x),
        1.0f / static_cast<float>(render_data.pgi_settings.probe_count.y),
        1.0f / static_cast<float>(render_data.pgi_settings.probe_count.z),
    };
    render_data.pgi_settings.irradiance_resolution_w_border = static_cast<float>(render_data.pgi_settings.probe_irradiance_resolution + 2);
    render_data.pgi_settings.irradiance_resolution_w_border_rcp = 1.0f / static_cast<float>(render_data.pgi_settings.probe_irradiance_resolution + 2);;
    render_data.pgi_settings.visibility_resolution_w_border = static_cast<float>(render_data.pgi_settings.probe_visibility_resolution + 2);
    render_data.pgi_settings.visibility_resolution_w_border_rcp = 1.0f / static_cast<float>(render_data.pgi_settings.probe_visibility_resolution + 2);
}

void PGIState::initialize(daxa::Device& device)
{
    this->debug_probe_mesh_triangles = (sizeof(PROBE_MESH_INDICES) / sizeof(daxa_i32)) / 3;
    auto const probe_triangles_mem_size = this->debug_probe_mesh_triangles * 3 * sizeof(daxa_i32);
    this->debug_probe_mesh_vertices = sizeof(PROBE_MESH_POSITIONS) / sizeof(daxa_f32vec3);
    auto const probe_vertex_mem_size = this->debug_probe_mesh_vertices * sizeof(daxa_f32vec3);

    this->debug_probe_mesh_buffer = device.create_buffer({
        .size = probe_triangles_mem_size + probe_vertex_mem_size,
        .allocate_info = daxa::MemoryFlagBits::HOST_ACCESS_SEQUENTIAL_WRITE,
        .name = "pgi probe debug mesh buffer",
    });

    std::byte* host_addr = device.buffer_host_address(this->debug_probe_mesh_buffer).value();
    std::memcpy(host_addr, PROBE_MESH_INDICES, probe_triangles_mem_size);
    std::memcpy(host_addr + probe_triangles_mem_size, PROBE_MESH_POSITIONS, probe_vertex_mem_size);

    daxa::DeviceAddress device_addr = device.buffer_device_address(this->debug_probe_mesh_buffer).value();

    this->debug_probe_mesh_vertex_positions_addr = reinterpret_cast<daxa_f32vec3*>(device_addr + probe_triangles_mem_size);
}

void PGIState::recreate_and_clear(daxa::Device& device, PGISettings const & settings)
{
    if (!this->probe_radiance.get_state().images.empty() && !this->probe_radiance.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_radiance.get_state().images[0]);
    }
    if (!this->probe_visibility.get_state().images.empty() && !this->probe_visibility.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_visibility.get_state().images[0]);
    }
    if (!this->probe_info.get_state().images.empty() && !this->probe_info.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_info.get_state().images[0]);
    }
    if (!this->cell_requests.get_state().images.empty() && !this->cell_requests.get_state().images[0].is_empty())
    {
        device.destroy_image(this->cell_requests.get_state().images[0]);
    }

    daxa::ImageId probe_radiance_image = device.create_image({
        .dimensions = 2,
        .format = daxa::Format::R16G16B16A16_SFLOAT,
        .size = {
            static_cast<u32>(settings.probe_count.x * (settings.probe_irradiance_resolution + 2)),
            static_cast<u32>(settings.probe_count.y * (settings.probe_irradiance_resolution + 2)),
            1
        },
        .array_layer_count = static_cast<u32>(settings.probe_count.z * settings.cascade_count),
        .usage = daxa::ImageUsageFlagBits::TRANSFER_DST | 
                daxa::ImageUsageFlagBits::TRANSFER_SRC | 
                daxa::ImageUsageFlagBits::SHADER_STORAGE |
                daxa::ImageUsageFlagBits::SHADER_SAMPLED,
        .name = "pgi probe radiance",
    });
    daxa::ImageId probe_visibility_image = device.create_image({
        .dimensions = 2,
        .format = daxa::Format::R16G16_SFLOAT,
        .size = {
            static_cast<u32>(settings.probe_count.x * (settings.probe_visibility_resolution + 2)),
            static_cast<u32>(settings.probe_count.y * (settings.probe_visibility_resolution + 2)),
            1
        },
        .array_layer_count = static_cast<u32>(settings.probe_count.z * settings.cascade_count),
        .usage = daxa::ImageUsageFlagBits::TRANSFER_DST | 
                daxa::ImageUsageFlagBits::TRANSFER_SRC | 
                daxa::ImageUsageFlagBits::SHADER_STORAGE |
                daxa::ImageUsageFlagBits::SHADER_SAMPLED,
        .name = "pgi probe visibility",
    });
    daxa::ImageId probe_info_image = device.create_image({
        .dimensions = 2,
        .format = daxa::Format::R32G32B32A32_SFLOAT,
        .size = {
            static_cast<u32>(settings.probe_count.x),
            static_cast<u32>(settings.probe_count.y),
            1
        },
        .array_layer_count = static_cast<u32>(settings.probe_count.z * settings.cascade_count),
        .usage = daxa::ImageUsageFlagBits::TRANSFER_DST | 
                daxa::ImageUsageFlagBits::TRANSFER_SRC | 
                daxa::ImageUsageFlagBits::SHADER_STORAGE |
                daxa::ImageUsageFlagBits::SHADER_SAMPLED,
        .name = "pgi probe info tex",
    });
    daxa::ImageId cell_requests_image = device.create_image({
        .dimensions = 2,
        .format = daxa::Format::R32_UINT,
        .size = {
            static_cast<u32>(settings.probe_count.x),
            static_cast<u32>(settings.probe_count.y),
            1
        },
        .array_layer_count = static_cast<u32>(settings.probe_count.z * settings.cascade_count),
        .usage = daxa::ImageUsageFlagBits::TRANSFER_DST | 
                daxa::ImageUsageFlagBits::TRANSFER_SRC | 
                daxa::ImageUsageFlagBits::SHADER_STORAGE |
                daxa::ImageUsageFlagBits::SHADER_SAMPLED,
        .name = "pgi cell requests tex",
    });

    this->probe_radiance = daxa::TaskImage(daxa::TaskImageInfo{
        .initial_images = daxa::TrackedImages{.images = std::array{ probe_radiance_image }},
        .name = "pgi probe radiance",
    });
    this->probe_visibility = daxa::TaskImage(daxa::TaskImageInfo{
        .initial_images = daxa::TrackedImages{.images = std::array{ probe_visibility_image }},
        .name = "pgi probe visibility",
    });
    this->probe_info = daxa::TaskImage(daxa::TaskImageInfo{
        .initial_images = daxa::TrackedImages{.images = std::array{ probe_info_image }},
        .name = "pgi probe info tex",
    });
    this->cell_requests = daxa::TaskImage(daxa::TaskImageInfo{
        .initial_images = daxa::TrackedImages{.images = std::array{ cell_requests_image }},
        .name = "pgi cell requests tex",
    });

    probe_irradiance_view = this->probe_radiance.view().layers(0, static_cast<u32>(settings.probe_count.z * settings.cascade_count));
    probe_visibility_view = this->probe_visibility.view().layers(0, static_cast<u32>(settings.probe_count.z * settings.cascade_count));
    probe_info_view = this->probe_info.view().layers(0, static_cast<u32>(settings.probe_count.z * settings.cascade_count));
    cell_requests_view = this->cell_requests.view().layers(0, static_cast<u32>(settings.probe_count.z * settings.cascade_count));

    daxa::TaskGraph tg{{
        .device = device,
        .name = "clear pgi resources",
    }};
    tg.use_persistent_image(probe_radiance);
    tg.use_persistent_image(probe_visibility);
    tg.use_persistent_image(probe_info);
    tg.use_persistent_image(cell_requests);
    tg.clear_image({.view = probe_irradiance_view, .name = "clear pgi radiance"});
    tg.clear_image({.view = probe_visibility_view, .name = "clear pgi visibility"});
    tg.clear_image({.view = probe_info_view, .name = "clear pgi info"});
    tg.clear_image({.view = cell_requests_view, .name = "clear pgi cell requests"});
    tg.submit({});
    tg.complete({});
    tg.execute({});
}

void PGIState::cleanup(daxa::Device& device)
{
    if (!this->debug_probe_mesh_buffer.is_empty())
    {
        device.destroy_buffer(this->debug_probe_mesh_buffer);
    }
    if (!this->probe_radiance.get_state().images.empty() && !this->probe_radiance.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_radiance.get_state().images[0]);
        probe_irradiance_view = daxa::NullTaskImage;
    }
    if (!this->probe_visibility.get_state().images.empty() && !this->probe_visibility.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_visibility.get_state().images[0]);
        probe_visibility_view = daxa::NullTaskImage;
    }
    if (!this->probe_info.get_state().images.empty() && !this->probe_info.get_state().images[0].is_empty())
    {
        device.destroy_image(this->probe_info.get_state().images[0]);
        probe_info_view = daxa::NullTaskImage;
    }
    if (!this->cell_requests.get_state().images.empty() && !this->cell_requests.get_state().images[0].is_empty())
    {
        device.destroy_image(this->cell_requests.get_state().images[0]);
        cell_requests_view = daxa::NullTaskImage;
    }
    *this = {};
}

auto pgi_create_trace_result_texture(daxa::TaskGraph& tg, PGISettings& settings, PGIState& state) -> daxa::TaskImageView
{
    return tg.create_transient_image({
        .format = daxa::Format::R16G16B16A16_SFLOAT,
        .size = { 
            static_cast<u32>(settings.probe_trace_resolution * PGI_TRACE_TEX_PROBES_X),
            static_cast<u32>(settings.probe_trace_resolution * (PGI_MAX_UPDATES_PER_FRAME / PGI_TRACE_TEX_PROBES_X)),
            1,
        },
        .array_layer_count = 1,
        .name = "pgi traced probe lighting and depth",
    });
}

auto pgi_create_probe_info_texture(daxa::TaskGraph& tg, PGISettings& settings, PGIState& state) -> daxa::TaskImageView
{
    return tg.create_transient_image({
        .dimensions = 2,
        .format = daxa::Format::R32G32B32A32_SFLOAT,
        .size = {
            static_cast<u32>(settings.probe_count.x),
            static_cast<u32>(settings.probe_count.y),
            1
        },
        .array_layer_count = static_cast<u32>(settings.probe_count.z * settings.cascade_count),
        .name = "pgi probe info tex prev frame",
    });
}

auto pgi_create_probe_indirections(daxa::TaskGraph& tg, PGISettings& settings, PGIState& state) -> daxa::TaskBufferView
{
    return tg.create_transient_buffer({
        .size = static_cast<u32>(sizeof(PGIIndirections) + sizeof(daxa_u32) * (PGI_MAX_REQUESTED_PROBES + PGI_MAX_UPDATES_PER_FRAME /*contains two arrays, for requested and updated*/)),
        .name = "pgi indirections",
    });
}

auto pgi_create_half_screen_irradiance(daxa::TaskGraph& tg, RenderGlobalData const& render_data) -> daxa::TaskImageView
{
    return tg.create_transient_image({
        .dimensions = 2,
        .format = daxa::Format::R16G16B16A16_SFLOAT, // TODO(pahrens): make U32 Packed exposure encoded
        .size = {
            static_cast<u32>(render_data.settings.render_target_size.x/2),
            static_cast<u32>(render_data.settings.render_target_size.y/2),
            1
        },
        .name = "pgi probe half screen irradiance",
    });
}

auto pgi_create_screen_irradiance(daxa::TaskGraph& tg, RenderGlobalData const & render_data) -> daxa::TaskImageView
{
    return tg.create_transient_image({
        .dimensions = 2,
        .format = daxa::Format::R16G16B16A16_SFLOAT, // TODO(pahrens): make U32 Packed exposure encoded
        .size = {
            static_cast<u32>(render_data.settings.render_target_size.x),
            static_cast<u32>(render_data.settings.render_target_size.y),
            1
        },
        .name = "pgi probe screen irradiance",
    });
}

auto task_pgi_update(TaskPgiUpdateInfo const & info) -> TaskPGIUpdateOut
{
    daxa::TaskBufferView pgi_indirections = pgi_create_probe_indirections(info.tg, info.render_context->render_data.pgi_settings, info.pgi_state);
    info.tg.clear_buffer({.buffer=pgi_indirections,.name="clear pgi indirections"});
    daxa::TaskImageView probe_info_copy = pgi_create_probe_info_texture(info.tg, info.render_context->render_data.pgi_settings, info.pgi_state);
    info.tg.add_task(PGIPreUpdateProbesTask{
        .views = PGIPreUpdateProbesTask::Views{
            .globals = info.render_context->tgpu_render_data.view(),
            .probe_info = info.pgi_state.probe_info_view,
            .probe_info_copy = probe_info_copy,
            .requests = info.pgi_state.cell_requests_view,
            .probe_indirections = pgi_indirections,
        },
        .render_context = info.render_context,
        .pgi_state = &info.pgi_state,
    });
    daxa::TaskImageView pgi_trace_result = pgi_create_trace_result_texture(info.tg, info.render_context->render_data.pgi_settings, info.pgi_state);
    info.tg.add_task(PGITraceProbeRaysTask{
        .views = PGITraceProbeRaysTask::Views{
            .globals = info.render_context->tgpu_render_data.view(),
            .probe_indirections = pgi_indirections,
            .light_mask_volume = info.light_mask_volume,
            .probe_radiance = info.pgi_state.probe_irradiance_view,
            .probe_visibility = info.pgi_state.probe_visibility_view,
            .probe_info = info.pgi_state.probe_info_view,
            .probe_requests = info.pgi_state.cell_requests_view,
            .sky_transmittance = info.sky_transmittance,
            .sky = info.sky,
            .tlas = info.tlas,
            .trace_result = pgi_trace_result,
            .mesh_instances = info.mesh_instances,
            .vsm_globals = info.vsm_globals,
            .vsm_point_lights = info.vsm_point_lights,
            .vsm_spot_lights = info.vsm_spot_lights,
            .vsm_memory_block = info.vsm_memory_block,
            .vsm_point_spot_page_table = info.vsm_point_spot_page_table,
        },
        .render_context = info.render_context,
        .pgi_state = &info.pgi_state,
    });    
    //info.tg.copy_image_to_image({info.pgi_state.probe_info_view, probe_info_copy, "copy over probe info prev frame"});
    info.tg.add_task(PGIUpdateProbesTask{
        .views = PGIUpdateProbesTask::Views{
            .globals = info.render_context->tgpu_render_data.view(),
            .probe_indirections = pgi_indirections,
            .probe_info = info.pgi_state.probe_info_view,
            .probe_info_copy = probe_info_copy,
            .trace_result = pgi_trace_result,
            .requests = info.pgi_state.cell_requests_view,
        },
        .render_context = info.render_context,
        .pgi_state = &info.pgi_state,
    });
    info.tg.add_task(PGIUpdateProbeTexelsTask{
        .views = PGIUpdateProbeTexelsTask::Views{
            .globals = info.render_context->tgpu_render_data.view(),
            .probe_indirections = pgi_indirections,
            .probe_radiance = info.pgi_state.probe_irradiance_view,
            .probe_visibility = info.pgi_state.probe_visibility_view,
            .probe_info = info.pgi_state.probe_info_view,
            .trace_result = pgi_trace_result,
        },
        .render_context = info.render_context,
        .pgi_state = &info.pgi_state,
    });


    TaskPGIUpdateOut ret = {};
    ret.pgi_indirections = pgi_indirections;
    ret.pgi_irradiance = info.pgi_state.probe_irradiance_view;
    ret.pgi_visibility = info.pgi_state.probe_visibility_view;
    ret.pgi_info = info.pgi_state.probe_info_view;
    ret.pgi_requests = info.pgi_state.cell_requests_view;
    return ret;
}

auto task_pgi_eval_screen_irradiance(TaskPGIEvalScreenIrradianceInfo const & info) -> daxa::TaskImageView
{
    auto pgi_screen_irrdiance = pgi_create_screen_irradiance(info.tg, info.render_context->render_data);
    info.tg.add_task(PGIEvalScreenIrradianceTask{
        .views = PGIEvalScreenIrradianceTask::Views{
            .globals = info.render_context->tgpu_render_data.view(),
            .debug_image = info.debug_image,
            .clocks_image = info.clocks_image,
            .main_cam_depth = info.view_camera_depth,
            .main_cam_face_normals = info.view_camera_face_normal_image,
            .main_cam_detail_normals = info.view_camera_detail_normal_image,
            .probe_info = info.pgi_state.probe_info_view,
            .probe_radiance = info.pgi_state.probe_irradiance_view,
            .probe_visibility = info.pgi_state.probe_visibility_view,
            .probe_requests = info.pgi_state.cell_requests_view,
            .irradiance_depth = pgi_screen_irrdiance,
        },
        .render_context = info.render_context,
        .pgi_state = &info.pgi_state,
    });
    return pgi_screen_irrdiance;
}